
f415-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c4  080053c4  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080053cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200000b0  0800547c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  0800547c  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f093  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002285  00000000  00000000  0002f173  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  000322b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002097e  00000000  00000000  00033050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b68b  00000000  00000000  000539ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c769b  00000000  00000000  0005f059  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001266f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004104  00000000  00000000  00126770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800533c 	.word	0x0800533c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	0800533c 	.word	0x0800533c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_ADC_ConvCpltCallback>:
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

// when adc conversion complete this callback function will run
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	delayTime = (uint16_t)(adcVal[0] / 8);					// change LED delay time with first potantiomater value
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <HAL_ADC_ConvCpltCallback+0x94>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	08db      	lsrs	r3, r3, #3
 800057e:	b29a      	uxth	r2, r3
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <HAL_ADC_ConvCpltCallback+0x98>)
 8000582:	801a      	strh	r2, [r3, #0]
	pwmVal = (uint8_t)(adcVal[1] / 16);						// change RGB brightness with second potatiometer
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_ADC_ConvCpltCallback+0x94>)
 8000586:	885b      	ldrh	r3, [r3, #2]
 8000588:	091b      	lsrs	r3, r3, #4
 800058a:	b29b      	uxth	r3, r3
 800058c:	b2db      	uxtb	r3, r3
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b1e      	ldr	r3, [pc, #120]	; (800060c <HAL_ADC_ConvCpltCallback+0x9c>)
 8000592:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, timerArr[rgbCnt], pwmVal);		// set RGB brightness
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000596:	f993 3000 	ldrsb.w	r3, [r3]
 800059a:	461a      	mov	r2, r3
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <HAL_ADC_ConvCpltCallback+0xa4>)
 800059e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d105      	bne.n	80005b2 <HAL_ADC_ConvCpltCallback+0x42>
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <HAL_ADC_ConvCpltCallback+0x9c>)
 80005a8:	881a      	ldrh	r2, [r3, #0]
 80005aa:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <HAL_ADC_ConvCpltCallback+0xa8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005b0:	e022      	b.n	80005f8 <HAL_ADC_ConvCpltCallback+0x88>
	__HAL_TIM_SET_COMPARE(&htim3, timerArr[rgbCnt], pwmVal);		// set RGB brightness
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_ADC_ConvCpltCallback+0xa0>)
 80005b4:	f993 3000 	ldrsb.w	r3, [r3]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_ADC_ConvCpltCallback+0xa4>)
 80005bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d105      	bne.n	80005d0 <HAL_ADC_ConvCpltCallback+0x60>
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_ADC_ConvCpltCallback+0x9c>)
 80005c6:	881a      	ldrh	r2, [r3, #0]
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <HAL_ADC_ConvCpltCallback+0xa8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005ce:	e013      	b.n	80005f8 <HAL_ADC_ConvCpltCallback+0x88>
	__HAL_TIM_SET_COMPARE(&htim3, timerArr[rgbCnt], pwmVal);		// set RGB brightness
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_ADC_ConvCpltCallback+0xa0>)
 80005d2:	f993 3000 	ldrsb.w	r3, [r3]
 80005d6:	461a      	mov	r2, r3
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_ADC_ConvCpltCallback+0xa4>)
 80005da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d105      	bne.n	80005ee <HAL_ADC_ConvCpltCallback+0x7e>
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_ADC_ConvCpltCallback+0x9c>)
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <HAL_ADC_ConvCpltCallback+0xa8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80005ec:	e004      	b.n	80005f8 <HAL_ADC_ConvCpltCallback+0x88>
	__HAL_TIM_SET_COMPARE(&htim3, timerArr[rgbCnt], pwmVal);		// set RGB brightness
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <HAL_ADC_ConvCpltCallback+0x9c>)
 80005f0:	881a      	ldrh	r2, [r3, #0]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <HAL_ADC_ConvCpltCallback+0xa8>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	2000024c 	.word	0x2000024c
 8000608:	2000003c 	.word	0x2000003c
 800060c:	2000010e 	.word	0x2000010e
 8000610:	200000cd 	.word	0x200000cd
 8000614:	20000030 	.word	0x20000030
 8000618:	20000150 	.word	0x20000150

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fe1b 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f90f 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 faf9 	bl	8000c20 <MX_GPIO_Init>
  MX_DMA_Init();
 800062e:	f000 fad7 	bl	8000be0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000632:	f000 f971 	bl	8000918 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000636:	f000 fa03 	bl	8000a40 <MX_TIM3_Init>
  MX_DAC_Init();
 800063a:	f000 f9cd 	bl	80009d8 <MX_DAC_Init>
  MX_TIM6_Init();
 800063e:	f000 fa6f 	bl	8000b20 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8000642:	f000 faa3 	bl	8000b8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcVal, 2);			// start adc conversion with dma
 8000646:	2202      	movs	r2, #2
 8000648:	4970      	ldr	r1, [pc, #448]	; (800080c <main+0x1f0>)
 800064a:	4871      	ldr	r0, [pc, #452]	; (8000810 <main+0x1f4>)
 800064c:	f001 f81e 	bl	800168c <HAL_ADC_Start_DMA>

  // start RGB LED PWM channels
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000650:	2100      	movs	r1, #0
 8000652:	4870      	ldr	r0, [pc, #448]	; (8000814 <main+0x1f8>)
 8000654:	f003 f84a 	bl	80036ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000658:	2104      	movs	r1, #4
 800065a:	486e      	ldr	r0, [pc, #440]	; (8000814 <main+0x1f8>)
 800065c:	f003 f846 	bl	80036ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000660:	2108      	movs	r1, #8
 8000662:	486c      	ldr	r0, [pc, #432]	; (8000814 <main+0x1f8>)
 8000664:	f003 f842 	bl	80036ec <HAL_TIM_PWM_Start>

  // start dac channels
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	486b      	ldr	r0, [pc, #428]	; (8000818 <main+0x1fc>)
 800066c:	f001 fcfb 	bl	8002066 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000670:	2110      	movs	r1, #16
 8000672:	4869      	ldr	r0, [pc, #420]	; (8000818 <main+0x1fc>)
 8000674:	f001 fcf7 	bl	8002066 <HAL_DAC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // read potantiometer values from adc buffer and write to uart buffer
	  uint8_t t_len = sprintf(txt, "ADC Val: %u %u\n\r", adcVal[0], adcVal[1]);
 8000678:	4b64      	ldr	r3, [pc, #400]	; (800080c <main+0x1f0>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b63      	ldr	r3, [pc, #396]	; (800080c <main+0x1f0>)
 8000680:	885b      	ldrh	r3, [r3, #2]
 8000682:	4966      	ldr	r1, [pc, #408]	; (800081c <main+0x200>)
 8000684:	4866      	ldr	r0, [pc, #408]	; (8000820 <main+0x204>)
 8000686:	f004 fa53 	bl	8004b30 <siprintf>
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]

	  //send uart buffer uisng uart3 which connect with ST-Link
	  HAL_UART_Transmit(&huart3, (uint8_t *)txt, t_len, 1000);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	b29a      	uxth	r2, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	4962      	ldr	r1, [pc, #392]	; (8000820 <main+0x204>)
 8000698:	4862      	ldr	r0, [pc, #392]	; (8000824 <main+0x208>)
 800069a:	f003 fdb8 	bl	800420e <HAL_UART_Transmit>

	  // check is button1 pressed
	  if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET)
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	4861      	ldr	r0, [pc, #388]	; (8000828 <main+0x20c>)
 80006a4:	f002 fb1e 	bl	8002ce4 <HAL_GPIO_ReadPin>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d11c      	bne.n	80006e8 <main+0xcc>
	  {
		  while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) HAL_Delay(10);		//wait when button1 until it realesed
 80006ae:	e002      	b.n	80006b6 <main+0x9a>
 80006b0:	200a      	movs	r0, #10
 80006b2:	f000 fe45 	bl	8001340 <HAL_Delay>
 80006b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ba:	485b      	ldr	r0, [pc, #364]	; (8000828 <main+0x20c>)
 80006bc:	f002 fb12 	bl	8002ce4 <HAL_GPIO_ReadPin>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d0f4      	beq.n	80006b0 <main+0x94>

		  animCnt++;						// increase animation counter to show other animation
 80006c6:	4b59      	ldr	r3, [pc, #356]	; (800082c <main+0x210>)
 80006c8:	f993 3000 	ldrsb.w	r3, [r3]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	4b55      	ldr	r3, [pc, #340]	; (800082c <main+0x210>)
 80006d6:	701a      	strb	r2, [r3, #0]

		  if(animCnt == 3) animCnt = 0;		// if animation counter equals to 3 reset it
 80006d8:	4b54      	ldr	r3, [pc, #336]	; (800082c <main+0x210>)
 80006da:	f993 3000 	ldrsb.w	r3, [r3]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d102      	bne.n	80006e8 <main+0xcc>
 80006e2:	4b52      	ldr	r3, [pc, #328]	; (800082c <main+0x210>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
	  }

	  // check is button2 pressed
	  if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_SET)
 80006e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ec:	4850      	ldr	r0, [pc, #320]	; (8000830 <main+0x214>)
 80006ee:	f002 faf9 	bl	8002ce4 <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d11c      	bne.n	8000732 <main+0x116>
	  {
		  while(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == GPIO_PIN_SET) HAL_Delay(10);	//wait when button2 until it realesed
 80006f8:	e002      	b.n	8000700 <main+0xe4>
 80006fa:	200a      	movs	r0, #10
 80006fc:	f000 fe20 	bl	8001340 <HAL_Delay>
 8000700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000704:	484a      	ldr	r0, [pc, #296]	; (8000830 <main+0x214>)
 8000706:	f002 faed 	bl	8002ce4 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d0f4      	beq.n	80006fa <main+0xde>

		  rgbCnt++;							// increase RGB LED counter to change which LED's brightness will control
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <main+0x218>)
 8000712:	f993 3000 	ldrsb.w	r3, [r3]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	3301      	adds	r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	b25a      	sxtb	r2, r3
 800071e:	4b45      	ldr	r3, [pc, #276]	; (8000834 <main+0x218>)
 8000720:	701a      	strb	r2, [r3, #0]

		  if(rgbCnt == 3) rgbCnt = 0;		// if rgb LED counter equales to 3 reset it
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <main+0x218>)
 8000724:	f993 3000 	ldrsb.w	r3, [r3]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d102      	bne.n	8000732 <main+0x116>
 800072c:	4b41      	ldr	r3, [pc, #260]	; (8000834 <main+0x218>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  }

	  // with 8 LED make animation with changing LED respectively
	  HAL_GPIO_WritePin((GPIO_TypeDef *)portArr[cnt], pinArr[cnt], GPIO_PIN_SET);
 8000732:	4b41      	ldr	r3, [pc, #260]	; (8000838 <main+0x21c>)
 8000734:	f993 3000 	ldrsb.w	r3, [r3]
 8000738:	461a      	mov	r2, r3
 800073a:	4b40      	ldr	r3, [pc, #256]	; (800083c <main+0x220>)
 800073c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000740:	4618      	mov	r0, r3
 8000742:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <main+0x21c>)
 8000744:	f993 3000 	ldrsb.w	r3, [r3]
 8000748:	461a      	mov	r2, r3
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <main+0x224>)
 800074c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	f002 fade 	bl	8002d14 <HAL_GPIO_WritePin>
	  HAL_Delay(delayTime);
 8000758:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <main+0x228>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fdef 	bl	8001340 <HAL_Delay>
	  HAL_GPIO_WritePin((GPIO_TypeDef *)portArr[cnt], pinArr[cnt], GPIO_PIN_RESET);
 8000762:	4b35      	ldr	r3, [pc, #212]	; (8000838 <main+0x21c>)
 8000764:	f993 3000 	ldrsb.w	r3, [r3]
 8000768:	461a      	mov	r2, r3
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <main+0x220>)
 800076c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000770:	4618      	mov	r0, r3
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <main+0x21c>)
 8000774:	f993 3000 	ldrsb.w	r3, [r3]
 8000778:	461a      	mov	r2, r3
 800077a:	4b31      	ldr	r3, [pc, #196]	; (8000840 <main+0x224>)
 800077c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	f002 fac6 	bl	8002d14 <HAL_GPIO_WritePin>

	  // change 8 LED animation
	  switch(animCnt){
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <main+0x210>)
 800078a:	f993 3000 	ldrsb.w	r3, [r3]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d015      	beq.n	80007be <main+0x1a2>
 8000792:	2b02      	cmp	r3, #2
 8000794:	d025      	beq.n	80007e2 <main+0x1c6>
 8000796:	2b00      	cmp	r3, #0
 8000798:	d128      	bne.n	80007ec <main+0x1d0>
	  case 0:
		  cnt++;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <main+0x21c>)
 800079c:	f993 3000 	ldrsb.w	r3, [r3]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	3301      	adds	r3, #1
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	b25a      	sxtb	r2, r3
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <main+0x21c>)
 80007aa:	701a      	strb	r2, [r3, #0]
		  if(cnt == 8) cnt = 0;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <main+0x21c>)
 80007ae:	f993 3000 	ldrsb.w	r3, [r3]
 80007b2:	2b08      	cmp	r3, #8
 80007b4:	d117      	bne.n	80007e6 <main+0x1ca>
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <main+0x21c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
		  break;
 80007bc:	e013      	b.n	80007e6 <main+0x1ca>
	  case 1:
		  cnt--;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <main+0x21c>)
 80007c0:	f993 3000 	ldrsb.w	r3, [r3]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	3b01      	subs	r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	b25a      	sxtb	r2, r3
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <main+0x21c>)
 80007ce:	701a      	strb	r2, [r3, #0]
		  if(cnt < 0) cnt = 7;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <main+0x21c>)
 80007d2:	f993 3000 	ldrsb.w	r3, [r3]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da07      	bge.n	80007ea <main+0x1ce>
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <main+0x21c>)
 80007dc:	2207      	movs	r2, #7
 80007de:	701a      	strb	r2, [r3, #0]
		  break;
 80007e0:	e003      	b.n	80007ea <main+0x1ce>
	  case 2:
		  break;
 80007e2:	bf00      	nop
 80007e4:	e002      	b.n	80007ec <main+0x1d0>
		  break;
 80007e6:	bf00      	nop
 80007e8:	e000      	b.n	80007ec <main+0x1d0>
		  break;
 80007ea:	bf00      	nop
	  }

	  // write dac values from dac channels depending to adc values
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adcVal[0]);
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <main+0x1f0>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <main+0x1fc>)
 80007f6:	f001 fd3d 	bl	8002274 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, adcVal[1]);
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <main+0x1f0>)
 80007fc:	885b      	ldrh	r3, [r3, #2]
 80007fe:	2200      	movs	r2, #0
 8000800:	2110      	movs	r1, #16
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <main+0x1fc>)
 8000804:	f001 fd36 	bl	8002274 <HAL_DAC_SetValue>
  {
 8000808:	e736      	b.n	8000678 <main+0x5c>
 800080a:	bf00      	nop
 800080c:	2000024c 	.word	0x2000024c
 8000810:	20000190 	.word	0x20000190
 8000814:	20000150 	.word	0x20000150
 8000818:	200001d8 	.word	0x200001d8
 800081c:	08005354 	.word	0x08005354
 8000820:	200000dc 	.word	0x200000dc
 8000824:	20000110 	.word	0x20000110
 8000828:	40020000 	.word	0x40020000
 800082c:	200000ce 	.word	0x200000ce
 8000830:	40020800 	.word	0x40020800
 8000834:	200000cd 	.word	0x200000cd
 8000838:	200000cc 	.word	0x200000cc
 800083c:	20000000 	.word	0x20000000
 8000840:	20000020 	.word	0x20000020
 8000844:	2000003c 	.word	0x2000003c

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0320 	add.w	r3, r7, #32
 8000852:	2230      	movs	r2, #48	; 0x30
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 f962 	bl	8004b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <SystemClock_Config+0xc8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a26      	ldr	r2, [pc, #152]	; (8000910 <SystemClock_Config+0xc8>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <SystemClock_Config+0xc8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <SystemClock_Config+0xcc>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a20      	ldr	r2, [pc, #128]	; (8000914 <SystemClock_Config+0xcc>)
 8000892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000896:	6013      	str	r3, [r2, #0]
 8000898:	4b1e      	ldr	r3, [pc, #120]	; (8000914 <SystemClock_Config+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b8:	2304      	movs	r3, #4
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008bc:	2348      	movs	r3, #72	; 0x48
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fa55 	bl	8002d7c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 fa36 	bl	8000d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2302      	movs	r3, #2
 80008e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2102      	movs	r1, #2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 fcaf 	bl	800325c <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000904:	f000 fa20 	bl	8000d48 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	; 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_ADC1_Init+0xb4>)
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MX_ADC1_Init+0xb8>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800093c:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_ADC1_Init+0xb4>)
 800093e:	2201      	movs	r2, #1
 8000940:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000944:	2201      	movs	r2, #1
 8000946:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000948:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_ADC1_Init+0xb4>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000958:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_ADC1_Init+0xbc>)
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_ADC1_Init+0xb4>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000964:	2202      	movs	r2, #2
 8000966:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_ADC1_Init+0xb4>)
 800096a:	2201      	movs	r2, #1
 800096c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000972:	2201      	movs	r2, #1
 8000974:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000976:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000978:	f000 fd04 	bl	8001384 <HAL_ADC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f9e1 	bl	8000d48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000986:	230a      	movs	r3, #10
 8000988:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800098a:	2301      	movs	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800098e:	2307      	movs	r3, #7
 8000990:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <MX_ADC1_Init+0xb4>)
 8000998:	f000 ff88 	bl	80018ac <HAL_ADC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009a2:	f000 f9d1 	bl	8000d48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009a6:	230b      	movs	r3, #11
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <MX_ADC1_Init+0xb4>)
 80009b4:	f000 ff7a 	bl	80018ac <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009be:	f000 f9c3 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000190 	.word	0x20000190
 80009d0:	40012000 	.word	0x40012000
 80009d4:	0f000001 	.word	0x0f000001

080009d8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_DAC_Init+0x60>)
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <MX_DAC_Init+0x64>)
 80009ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <MX_DAC_Init+0x60>)
 80009ee:	f001 fb18 	bl	8002022 <HAL_DAC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009f8:	f000 f9a6 	bl	8000d48 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <MX_DAC_Init+0x60>)
 8000a0c:	f001 fbe5 	bl	80021da <HAL_DAC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a16:	f000 f997 	bl	8000d48 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_DAC_Init+0x60>)
 8000a22:	f001 fbda 	bl	80021da <HAL_DAC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f98c 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200001d8 	.word	0x200001d8
 8000a3c:	40007400 	.word	0x40007400

08000a40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a62:	4b2d      	ldr	r3, [pc, #180]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a64:	4a2d      	ldr	r2, [pc, #180]	; (8000b1c <MX_TIM3_Init+0xdc>)
 8000a66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 143;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a6a:	228f      	movs	r2, #143	; 0x8f
 8000a6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8000a74:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a76:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a88:	4823      	ldr	r0, [pc, #140]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000a8a:	f002 fe04 	bl	8003696 <HAL_TIM_PWM_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 f958 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aa0:	f107 0320 	add.w	r3, r7, #32
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000aa8:	f003 fad4 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ab2:	f000 f949 	bl	8000d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab6:	2360      	movs	r3, #96	; 0x60
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4812      	ldr	r0, [pc, #72]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000ace:	f002 ff53 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ad8:	f000 f936 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2204      	movs	r2, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000ae4:	f002 ff48 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000aee:	f000 f92b 	bl	8000d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2208      	movs	r2, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	4807      	ldr	r0, [pc, #28]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000afa:	f002 ff3d 	bl	8003978 <HAL_TIM_PWM_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000b04:	f000 f920 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <MX_TIM3_Init+0xd8>)
 8000b0a:	f000 fa69 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000150 	.word	0x20000150
 8000b1c:	40000400 	.word	0x40000400

08000b20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b30:	4a15      	ldr	r2, [pc, #84]	; (8000b88 <MX_TIM6_Init+0x68>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3599;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b36:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b44:	2213      	movs	r2, #19
 8000b46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b50:	f002 fd76 	bl	8003640 <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000b5a:	f000 f8f5 	bl	8000d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <MX_TIM6_Init+0x64>)
 8000b6c:	f003 fa72 	bl	8004054 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b76:	f000 f8e7 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000250 	.word	0x20000250
 8000b88:	40001000 	.word	0x40001000

08000b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART3_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART3_UART_Init+0x4c>)
 8000bc4:	f003 fad6 	bl	8004174 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 f8bb 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000110 	.word	0x20000110
 8000bdc:	40004800 	.word	0x40004800

08000be0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_DMA_Init+0x3c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2038      	movs	r0, #56	; 0x38
 8000c08:	f001 f9d5 	bl	8001fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c0c:	2038      	movs	r0, #56	; 0x38
 8000c0e:	f001 f9ee 	bl	8001fee <HAL_NVIC_EnableIRQ>

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b3c      	ldr	r3, [pc, #240]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a37      	ldr	r2, [pc, #220]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b31      	ldr	r3, [pc, #196]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a30      	ldr	r2, [pc, #192]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b2e      	ldr	r3, [pc, #184]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b2a      	ldr	r3, [pc, #168]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a29      	ldr	r2, [pc, #164]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_GPIO_Init+0x118>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cac:	4823      	ldr	r0, [pc, #140]	; (8000d3c <MX_GPIO_Init+0x11c>)
 8000cae:	f002 f831 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000cb8:	4821      	ldr	r0, [pc, #132]	; (8000d40 <MX_GPIO_Init+0x120>)
 8000cba:	f002 f82b 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cbe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4819      	ldr	r0, [pc, #100]	; (8000d3c <MX_GPIO_Init+0x11c>)
 8000cd8:	f001 fe6a 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8000cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_GPIO_Init+0x124>)
 8000cf2:	f001 fe5d 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_GPIO_Init+0x120>)
 8000d0c:	f001 fe50 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d10:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_GPIO_Init+0x120>)
 8000d2a:	f001 fe41 	bl	80029b0 <HAL_GPIO_Init>

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40020800 	.word	0x40020800

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000d4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <Error_Handler+0x18>)
 8000d52:	f001 fff8 	bl	8002d46 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5a:	f000 faf1 	bl	8001340 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000d5e:	e7f5      	b.n	8000d4c <Error_Handler+0x4>
 8000d60:	40020400 	.word	0x40020400

08000d64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a33      	ldr	r2, [pc, #204]	; (8000ea0 <HAL_ADC_MspInit+0xec>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d15f      	bne.n	8000e96 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <HAL_ADC_MspInit+0xf0>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <HAL_ADC_MspInit+0xf0>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b2f      	ldr	r3, [pc, #188]	; (8000ea4 <HAL_ADC_MspInit+0xf0>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <HAL_ADC_MspInit+0xf0>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a2a      	ldr	r2, [pc, #168]	; (8000ea4 <HAL_ADC_MspInit+0xf0>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_ADC_MspInit+0xf0>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <HAL_ADC_MspInit+0xf4>)
 8000e22:	f001 fdc5 	bl	80029b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e28:	4a21      	ldr	r2, [pc, #132]	; (8000eb0 <HAL_ADC_MspInit+0xfc>)
 8000e2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e46:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e6a:	4810      	ldr	r0, [pc, #64]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e6c:	f001 fa32 	bl	80022d4 <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e76:	f7ff ff67 	bl	8000d48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_ADC_MspInit+0xf8>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	2012      	movs	r0, #18
 8000e8c:	f001 f893 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e90:	2012      	movs	r0, #18
 8000e92:	f001 f8ac 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40012000 	.word	0x40012000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	200001ec 	.word	0x200001ec
 8000eb0:	40026410 	.word	0x40026410

08000eb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <HAL_DAC_MspInit+0x8c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d12f      	bne.n	8000f36 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_DAC_MspInit+0x90>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <HAL_DAC_MspInit+0x90>)
 8000ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_DAC_MspInit+0x90>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_DAC_MspInit+0x90>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_DAC_MspInit+0x90>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_DAC_MspInit+0x90>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f0e:	2330      	movs	r3, #48	; 0x30
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f12:	2303      	movs	r3, #3
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4809      	ldr	r0, [pc, #36]	; (8000f48 <HAL_DAC_MspInit+0x94>)
 8000f22:	f001 fd45 	bl	80029b0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2036      	movs	r0, #54	; 0x36
 8000f2c:	f001 f843 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f30:	2036      	movs	r0, #54	; 0x36
 8000f32:	f001 f85c 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40007400 	.word	0x40007400
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d10d      	bne.n	8000f7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_TIM_PWM_MspInit+0x40>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <HAL_TIM_PWM_MspInit+0x40>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_TIM_PWM_MspInit+0x40>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	40000400 	.word	0x40000400
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_TIM_Base_MspInit+0x48>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d115      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_Base_MspInit+0x4c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_Base_MspInit+0x4c>)
 8000fac:	f043 0310 	orr.w	r3, r3, #16
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0310 	and.w	r3, r3, #16
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2036      	movs	r0, #54	; 0x36
 8000fc4:	f000 fff7 	bl	8001fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fc8:	2036      	movs	r0, #54	; 0x36
 8000fca:	f001 f810 	bl	8001fee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40001000 	.word	0x40001000
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_TIM_MspPostInit+0x68>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d11e      	bne.n	8001040 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_TIM_MspPostInit+0x6c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_TIM_MspPostInit+0x6c>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_TIM_MspPostInit+0x6c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800101e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001022:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_TIM_MspPostInit+0x70>)
 800103c:	f001 fcb8 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40000400 	.word	0x40000400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020800 	.word	0x40020800

08001054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <HAL_UART_MspInit+0x84>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d12c      	bne.n	80010d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_UART_MspInit+0x88>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_UART_MspInit+0x88>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_UART_MspInit+0x88>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_UART_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c0:	2307      	movs	r3, #7
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_UART_MspInit+0x8c>)
 80010cc:	f001 fc70 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40004800 	.word	0x40004800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020400 	.word	0x40020400

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001138:	f000 f8e2 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <ADC_IRQHandler+0x10>)
 8001146:	f000 f960 	bl	800140a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000190 	.word	0x20000190

08001154 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <TIM6_DAC_IRQHandler+0x14>)
 800115a:	f000 ffea 	bl	8002132 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <TIM6_DAC_IRQHandler+0x18>)
 8001160:	f002 fb02 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001d8 	.word	0x200001d8
 800116c:	20000250 	.word	0x20000250

08001170 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA2_Stream0_IRQHandler+0x10>)
 8001176:	f001 f9b3 	bl	80024e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001ec 	.word	0x200001ec

08001184 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x50>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x16>
		heap_end = &end;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <_sbrk+0x50>)
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <_sbrk+0x54>)
 8001198:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <_sbrk+0x50>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <_sbrk+0x50>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	466a      	mov	r2, sp
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d907      	bls.n	80011be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ae:	f003 fc8d 	bl	8004acc <__errno>
 80011b2:	4602      	mov	r2, r0
 80011b4:	230c      	movs	r3, #12
 80011b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	e006      	b.n	80011cc <_sbrk+0x48>
	}

	heap_end += incr;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <_sbrk+0x50>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <_sbrk+0x50>)
 80011c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000d0 	.word	0x200000d0
 80011d8:	20000298 	.word	0x20000298

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <SystemInit+0x28>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <SystemInit+0x28>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SystemInit+0x28>)
 80011f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f6:	609a      	str	r2, [r3, #8]
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800120c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800120e:	e003      	b.n	8001218 <LoopCopyDataInit>

08001210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001216:	3104      	adds	r1, #4

08001218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800121c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800121e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001220:	d3f6      	bcc.n	8001210 <CopyDataInit>
  ldr  r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001224:	e002      	b.n	800122c <LoopFillZerobss>

08001226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001228:	f842 3b04 	str.w	r3, [r2], #4

0800122c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800122e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001230:	d3f9      	bcc.n	8001226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001232:	f7ff ffd3 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f003 fc4f 	bl	8004ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff f9ef 	bl	800061c <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001244:	080053cc 	.word	0x080053cc
  ldr  r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800124c:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8001250:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8001254:	20000298 	.word	0x20000298

08001258 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <CAN1_RX0_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 fe8b 	bl	8001fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fd68 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fea3 	bl	800200a <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 fe6b 	bl	8001fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000040 	.word	0x20000040
 80012f8:	20000048 	.word	0x20000048
 80012fc:	20000044 	.word	0x20000044

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000048 	.word	0x20000048
 8001324:	20000290 	.word	0x20000290

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000290 	.word	0x20000290

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_Delay+0x40>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000048 	.word	0x20000048

08001384 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e033      	b.n	8001402 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fd06 	bl	8000db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d118      	bne.n	80013f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ca:	f023 0302 	bic.w	r3, r3, #2
 80013ce:	f043 0202 	orr.w	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fb8a 	bl	8001af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
 80013f2:	e001      	b.n	80013f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b02      	cmp	r3, #2
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b20      	cmp	r3, #32
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d049      	beq.n	80014e0 <HAL_ADC_IRQHandler+0xd6>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d046      	beq.n	80014e0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	2b00      	cmp	r3, #0
 800145c:	d105      	bne.n	800146a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d12b      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800147c:	2b00      	cmp	r3, #0
 800147e:	d127      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001498:	2b00      	cmp	r3, #0
 800149a:	d119      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0220 	bic.w	r2, r2, #32
 80014aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff f84d 	bl	8000570 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f06f 0212 	mvn.w	r2, #18
 80014de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf0c      	ite	eq
 80014ee:	2301      	moveq	r3, #1
 80014f0:	2300      	movne	r3, #0
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001500:	2b80      	cmp	r3, #128	; 0x80
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d057      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x1b8>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d054      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d139      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001556:	2b00      	cmp	r3, #0
 8001558:	d12b      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d124      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d11d      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800158c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f043 0201 	orr.w	r2, r3, #1
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fc1a 	bl	8001dec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f06f 020c 	mvn.w	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d017      	beq.n	8001624 <HAL_ADC_IRQHandler+0x21a>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d014      	beq.n	8001624 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d10d      	bne.n	8001624 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f935 	bl	8001884 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f06f 0201 	mvn.w	r2, #1
 8001622:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0320 	and.w	r3, r3, #32
 800162e:	2b20      	cmp	r3, #32
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d015      	beq.n	8001684 <HAL_ADC_IRQHandler+0x27a>
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d012      	beq.n	8001684 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0220 	mvn.w	r2, #32
 8001672:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f90f 	bl	8001898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f06f 0220 	mvn.w	r2, #32
 8001682:	601a      	str	r2, [r3, #0]
  }
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Start_DMA+0x1e>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e0cc      	b.n	8001844 <HAL_ADC_Start_DMA+0x1b8>
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d018      	beq.n	80016f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_ADC_Start_DMA+0x1c0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a5e      	ldr	r2, [pc, #376]	; (8001850 <HAL_ADC_Start_DMA+0x1c4>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9a      	lsrs	r2, r3, #18
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016e4:	e002      	b.n	80016ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f9      	bne.n	80016e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f040 80a0 	bne.w	8001842 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800172c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001740:	d106      	bne.n	8001750 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f023 0206 	bic.w	r2, r3, #6
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
 800174e:	e002      	b.n	8001756 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800175e:	4b3d      	ldr	r3, [pc, #244]	; (8001854 <HAL_ADC_Start_DMA+0x1c8>)
 8001760:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	4a3c      	ldr	r2, [pc, #240]	; (8001858 <HAL_ADC_Start_DMA+0x1cc>)
 8001768:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	4a3b      	ldr	r2, [pc, #236]	; (800185c <HAL_ADC_Start_DMA+0x1d0>)
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	4a3a      	ldr	r2, [pc, #232]	; (8001860 <HAL_ADC_Start_DMA+0x1d4>)
 8001778:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001782:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001792:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	334c      	adds	r3, #76	; 0x4c
 80017ae:	4619      	mov	r1, r3
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f000 fe3c 	bl	8002430 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 031f 	and.w	r3, r3, #31
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d12a      	bne.n	800181a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_ADC_Start_DMA+0x1d8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d015      	beq.n	80017fa <HAL_ADC_Start_DMA+0x16e>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a25      	ldr	r2, [pc, #148]	; (8001868 <HAL_ADC_Start_DMA+0x1dc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_Start_DMA+0x158>
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_ADC_Start_DMA+0x1c8>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00a      	beq.n	80017fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a20      	ldr	r2, [pc, #128]	; (800186c <HAL_ADC_Start_DMA+0x1e0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d129      	bne.n	8001842 <HAL_ADC_Start_DMA+0x1b6>
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_ADC_Start_DMA+0x1c8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d823      	bhi.n	8001842 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11c      	bne.n	8001842 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	e013      	b.n	8001842 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <HAL_ADC_Start_DMA+0x1d8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d10e      	bne.n	8001842 <HAL_ADC_Start_DMA+0x1b6>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001840:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000040 	.word	0x20000040
 8001850:	431bde83 	.word	0x431bde83
 8001854:	40012300 	.word	0x40012300
 8001858:	08001ce9 	.word	0x08001ce9
 800185c:	08001da3 	.word	0x08001da3
 8001860:	08001dbf 	.word	0x08001dbf
 8001864:	40012000 	.word	0x40012000
 8001868:	40012100 	.word	0x40012100
 800186c:	40012200 	.word	0x40012200

08001870 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x1c>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e105      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x228>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b09      	cmp	r3, #9
 80018d6:	d925      	bls.n	8001924 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68d9      	ldr	r1, [r3, #12]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	3b1e      	subs	r3, #30
 80018ee:	2207      	movs	r2, #7
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68d9      	ldr	r1, [r3, #12]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	4603      	mov	r3, r0
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4403      	add	r3, r0
 8001916:	3b1e      	subs	r3, #30
 8001918:	409a      	lsls	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	e022      	b.n	800196a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	2207      	movs	r2, #7
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6919      	ldr	r1, [r3, #16]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	4603      	mov	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4403      	add	r3, r0
 8001960:	409a      	lsls	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d824      	bhi.n	80019bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b05      	subs	r3, #5
 8001984:	221f      	movs	r2, #31
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	400a      	ands	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b05      	subs	r3, #5
 80019ae:	fa00 f203 	lsl.w	r2, r0, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ba:	e04c      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d824      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b23      	subs	r3, #35	; 0x23
 80019d6:	221f      	movs	r2, #31
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43da      	mvns	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	400a      	ands	r2, r1
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b23      	subs	r3, #35	; 0x23
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a0c:	e023      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b41      	subs	r3, #65	; 0x41
 8001a20:	221f      	movs	r2, #31
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	3b41      	subs	r3, #65	; 0x41
 8001a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_ADC_ConfigChannel+0x234>)
 8001a58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_ADC_ConfigChannel+0x238>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1cc>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a19      	ldr	r2, [pc, #100]	; (8001ae4 <HAL_ADC_ConfigChannel+0x238>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d123      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x21e>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d003      	beq.n	8001a92 <HAL_ADC_ConfigChannel+0x1e6>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b11      	cmp	r3, #17
 8001a90:	d11b      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b10      	cmp	r3, #16
 8001aa4:	d111      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_ADC_ConfigChannel+0x23c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_ADC_ConfigChannel+0x240>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	0c9a      	lsrs	r2, r3, #18
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001abc:	e002      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f9      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	40012000 	.word	0x40012000
 8001ae8:	20000040 	.word	0x20000040
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af8:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <ADC_Init+0x1f0>)
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	021a      	lsls	r2, r3, #8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <ADC_Init+0x1f4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6899      	ldr	r1, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6899      	ldr	r1, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e00f      	b.n	8001bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0202 	bic.w	r2, r2, #2
 8001bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e1b      	ldrb	r3, [r3, #24]
 8001c08:	005a      	lsls	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6859      	ldr	r1, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	3b01      	subs	r3, #1
 8001c48:	035a      	lsls	r2, r3, #13
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e007      	b.n	8001c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	051a      	lsls	r2, r3, #20
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ca6:	025a      	lsls	r2, r3, #9
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6899      	ldr	r1, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	029a      	lsls	r2, r3, #10
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40012300 	.word	0x40012300
 8001ce4:	0f000001 	.word	0x0f000001

08001ce8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d13c      	bne.n	8001d7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d12b      	bne.n	8001d74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d127      	bne.n	8001d74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d119      	bne.n	8001d74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0220 	bic.w	r2, r2, #32
 8001d4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d105      	bne.n	8001d74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7fe fbfb 	bl	8000570 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d7a:	e00e      	b.n	8001d9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff fd85 	bl	8001898 <HAL_ADC_ErrorCallback>
}
 8001d8e:	e004      	b.n	8001d9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f7ff fd5d 	bl	8001870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f043 0204 	orr.w	r2, r3, #4
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f7ff fd5a 	bl	8001898 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <__NVIC_EnableIRQ+0x38>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6c:	d301      	bcc.n	8001f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e00f      	b.n	8001f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f72:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <SysTick_Config+0x40>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7a:	210f      	movs	r1, #15
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f7ff ff8e 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <SysTick_Config+0x40>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SysTick_Config+0x40>)
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff29 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc8:	f7ff ff3e 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	6978      	ldr	r0, [r7, #20]
 8001fd4:	f7ff ff8e 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff5d 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff31 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffa2 	bl	8001f5c <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e014      	b.n	800205e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe ff35 	bl	8000eb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	795b      	ldrb	r3, [r3, #5]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_DAC_Start+0x1e>
 8002080:	2302      	movs	r3, #2
 8002082:	e050      	b.n	8002126 <HAL_DAC_Start+0xc0>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	409a      	lsls	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11a      	bne.n	80020e0 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c0:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d127      	bne.n	8002118 <HAL_DAC_Start+0xb2>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b38      	cmp	r3, #56	; 0x38
 80020cc:	d124      	bne.n	8002118 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e01b      	b.n	8002118 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ea:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80020f6:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020fe:	d10b      	bne.n	8002118 <HAL_DAC_Start+0xb2>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002106:	d107      	bne.n	8002118 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0202 	orr.w	r2, r2, #2
 8002116:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002148:	d118      	bne.n	800217c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002174:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f825 	bl	80021c6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218a:	d118      	bne.n	80021be <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2204      	movs	r2, #4
 8002190:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f043 0202 	orr.w	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80021b6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f880 	bl	80022be <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80021da:	b480      	push	{r7}
 80021dc:	b087      	sub	sp, #28
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	795b      	ldrb	r3, [r3, #5]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_DAC_ConfigChannel+0x20>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e036      	b.n	8002268 <HAL_DAC_ConfigChannel+0x8e>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2202      	movs	r2, #2
 8002204:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800220e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4013      	ands	r3, r2
 800221e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6819      	ldr	r1, [r3, #0]
 8002248:	22c0      	movs	r2, #192	; 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43da      	mvns	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	400a      	ands	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	3308      	adds	r3, #8
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e004      	b.n	80022a8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	3314      	adds	r3, #20
 80022a6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	461a      	mov	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff f822 	bl	8001328 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e099      	b.n	8002424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002310:	e00f      	b.n	8002332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002312:	f7ff f809 	bl	8001328 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b05      	cmp	r3, #5
 800231e:	d908      	bls.n	8002332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2203      	movs	r2, #3
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e078      	b.n	8002424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e8      	bne.n	8002312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_DMA_Init+0x158>)
 800234c:	4013      	ands	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b04      	cmp	r3, #4
 800238a:	d107      	bne.n	800239c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4313      	orrs	r3, r2
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0307 	bic.w	r3, r3, #7
 80023b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d117      	bne.n	80023f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa6f 	bl	80028bc <DMA_CheckFifoParam>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023f2:	2301      	movs	r3, #1
 80023f4:	e016      	b.n	8002424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fa26 	bl	8002850 <DMA_CalcBaseAndBitshift>
 8002404:	4603      	mov	r3, r0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	223f      	movs	r2, #63	; 0x3f
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	f010803f 	.word	0xf010803f

08002430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Start_IT+0x26>
 8002452:	2302      	movs	r3, #2
 8002454:	e040      	b.n	80024d8 <HAL_DMA_Start_IT+0xa8>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d12f      	bne.n	80024ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2202      	movs	r2, #2
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f9b8 	bl	80027f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	223f      	movs	r2, #63	; 0x3f
 800248a:	409a      	lsls	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0216 	orr.w	r2, r2, #22
 800249e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e005      	b.n	80024d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
 80024d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024ec:	4b92      	ldr	r3, [pc, #584]	; (8002738 <HAL_DMA_IRQHandler+0x258>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a92      	ldr	r2, [pc, #584]	; (800273c <HAL_DMA_IRQHandler+0x25c>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2208      	movs	r2, #8
 800250c:	409a      	lsls	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01a      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0204 	bic.w	r2, r2, #4
 8002532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	2208      	movs	r2, #8
 800253a:	409a      	lsls	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	2201      	movs	r2, #1
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00b      	beq.n	8002582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2201      	movs	r2, #1
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f043 0202 	orr.w	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2204      	movs	r2, #4
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2204      	movs	r2, #4
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	2210      	movs	r2, #16
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d043      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03c      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	2210      	movs	r2, #16
 80025dc:	409a      	lsls	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d018      	beq.n	8002622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d108      	bne.n	8002610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d024      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
 800260e:	e01f      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
 8002620:	e016      	b.n	8002650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2220      	movs	r2, #32
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 808e 	beq.w	800277e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 8086 	beq.w	800277e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	2220      	movs	r2, #32
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d136      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0216 	bic.w	r2, r2, #22
 8002698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <HAL_DMA_IRQHandler+0x1da>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0208 	bic.w	r2, r2, #8
 80026c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d07d      	beq.n	80027ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
        }
        return;
 80026f6:	e078      	b.n	80027ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01c      	beq.n	8002740 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d108      	bne.n	8002726 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	2b00      	cmp	r3, #0
 800271a:	d030      	beq.n	800277e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e02b      	b.n	800277e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d027      	beq.n	800277e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
 8002736:	e022      	b.n	800277e <HAL_DMA_IRQHandler+0x29e>
 8002738:	20000040 	.word	0x20000040
 800273c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0210 	bic.w	r2, r2, #16
 800275c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d032      	beq.n	80027ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d022      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2205      	movs	r2, #5
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d307      	bcc.n	80027c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f2      	bne.n	80027aa <HAL_DMA_IRQHandler+0x2ca>
 80027c4:	e000      	b.n	80027c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e000      	b.n	80027ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80027ea:	bf00      	nop
    }
  }
}
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop

080027f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	d108      	bne.n	8002834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002832:	e007      	b.n	8002844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	60da      	str	r2, [r3, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3b10      	subs	r3, #16
 8002860:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <DMA_CalcBaseAndBitshift+0x64>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286a:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <DMA_CalcBaseAndBitshift+0x68>)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d909      	bls.n	8002892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	1d1a      	adds	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	659a      	str	r2, [r3, #88]	; 0x58
 8002890:	e007      	b.n	80028a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	aaaaaaab 	.word	0xaaaaaaab
 80028b8:	08005380 	.word	0x08005380

080028bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11f      	bne.n	8002916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d855      	bhi.n	8002988 <DMA_CheckFifoParam+0xcc>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <DMA_CheckFifoParam+0x28>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	08002907 	.word	0x08002907
 80028ec:	080028f5 	.word	0x080028f5
 80028f0:	08002989 	.word	0x08002989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d045      	beq.n	800298c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002904:	e042      	b.n	800298c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800290e:	d13f      	bne.n	8002990 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002914:	e03c      	b.n	8002990 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	d121      	bne.n	8002964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d836      	bhi.n	8002994 <DMA_CheckFifoParam+0xd8>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <DMA_CheckFifoParam+0x70>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002943 	.word	0x08002943
 8002934:	0800293d 	.word	0x0800293d
 8002938:	08002955 	.word	0x08002955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e02f      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d024      	beq.n	8002998 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002952:	e021      	b.n	8002998 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295c:	d11e      	bne.n	800299c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002962:	e01b      	b.n	800299c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <DMA_CheckFifoParam+0xb4>
 800296a:	2b03      	cmp	r3, #3
 800296c:	d003      	beq.n	8002976 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800296e:	e018      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      break;
 8002974:	e015      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00e      	beq.n	80029a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
      break;
 8002986:	e00b      	b.n	80029a0 <DMA_CheckFifoParam+0xe4>
      break;
 8002988:	bf00      	nop
 800298a:	e00a      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 800298c:	bf00      	nop
 800298e:	e008      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 8002990:	bf00      	nop
 8002992:	e006      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 8002994:	bf00      	nop
 8002996:	e004      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 8002998:	bf00      	nop
 800299a:	e002      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800299c:	bf00      	nop
 800299e:	e000      	b.n	80029a2 <DMA_CheckFifoParam+0xe6>
      break;
 80029a0:	bf00      	nop
    }
  } 
  
  return status; 
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e16b      	b.n	8002ca4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 815a 	bne.w	8002c9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d00b      	beq.n	8002a0a <HAL_GPIO_Init+0x5a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029fe:	2b11      	cmp	r3, #17
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0xfc>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b12      	cmp	r3, #18
 8002aaa:	d123      	bne.n	8002af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	08da      	lsrs	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3208      	adds	r2, #8
 8002ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	08da      	lsrs	r2, r3, #3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3208      	adds	r2, #8
 8002aee:	69b9      	ldr	r1, [r7, #24]
 8002af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0203 	and.w	r2, r3, #3
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80b4 	beq.w	8002c9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_GPIO_Init+0x308>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <HAL_GPIO_Init+0x308>)
 8002b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b44:	6453      	str	r3, [r2, #68]	; 0x44
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_GPIO_Init+0x308>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b52:	4a5a      	ldr	r2, [pc, #360]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	089b      	lsrs	r3, r3, #2
 8002b58:	3302      	adds	r3, #2
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a51      	ldr	r2, [pc, #324]	; (8002cc0 <HAL_GPIO_Init+0x310>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_GPIO_Init+0x314>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4f      	ldr	r2, [pc, #316]	; (8002cc8 <HAL_GPIO_Init+0x318>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <HAL_GPIO_Init+0x31c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x21a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4d      	ldr	r2, [pc, #308]	; (8002cd0 <HAL_GPIO_Init+0x320>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4c      	ldr	r2, [pc, #304]	; (8002cd4 <HAL_GPIO_Init+0x324>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x212>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4b      	ldr	r2, [pc, #300]	; (8002cd8 <HAL_GPIO_Init+0x328>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_GPIO_Init+0x32c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x20a>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00e      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bba:	2308      	movs	r3, #8
 8002bbc:	e00c      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e00a      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x228>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be8:	4934      	ldr	r1, [pc, #208]	; (8002cbc <HAL_GPIO_Init+0x30c>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c1a:	4a31      	ldr	r2, [pc, #196]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c20:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c44:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c98:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <HAL_GPIO_Init+0x330>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f ae90 	bls.w	80029cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3724      	adds	r7, #36	; 0x24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40021400 	.word	0x40021400
 8002cd8:	40021800 	.word	0x40021800
 8002cdc:	40021c00 	.word	0x40021c00
 8002ce0:	40013c00 	.word	0x40013c00

08002ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e001      	b.n	8002d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
 8002d20:	4613      	mov	r3, r2
 8002d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d24:	787b      	ldrb	r3, [r7, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d2a:	887a      	ldrh	r2, [r7, #2]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d30:	e003      	b.n	8002d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d32:	887b      	ldrh	r3, [r7, #2]
 8002d34:	041a      	lsls	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	619a      	str	r2, [r3, #24]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	401a      	ands	r2, r3
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d104      	bne.n	8002d6a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d60:	887b      	ldrh	r3, [r7, #2]
 8002d62:	041a      	lsls	r2, r3, #16
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e25b      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d075      	beq.n	8002e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9a:	4ba3      	ldr	r3, [pc, #652]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d00c      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4ba0      	ldr	r3, [pc, #640]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d112      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b9d      	ldr	r3, [pc, #628]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc0:	4b99      	ldr	r3, [pc, #612]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d05b      	beq.n	8002e84 <HAL_RCC_OscConfig+0x108>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d157      	bne.n	8002e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e236      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x74>
 8002de2:	4b91      	ldr	r3, [pc, #580]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a90      	ldr	r2, [pc, #576]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01d      	b.n	8002e2c <HAL_RCC_OscConfig+0xb0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x98>
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a8a      	ldr	r2, [pc, #552]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b88      	ldr	r3, [pc, #544]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a87      	ldr	r2, [pc, #540]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0xb0>
 8002e14:	4b84      	ldr	r3, [pc, #528]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a83      	ldr	r2, [pc, #524]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	4b81      	ldr	r3, [pc, #516]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a80      	ldr	r2, [pc, #512]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d013      	beq.n	8002e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fa78 	bl	8001328 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e3c:	f7fe fa74 	bl	8001328 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e1fb      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0xc0>
 8002e5a:	e014      	b.n	8002e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fa64 	bl	8001328 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e64:	f7fe fa60 	bl	8001328 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1e7      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0xe8>
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d063      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e92:	4b65      	ldr	r3, [pc, #404]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b62      	ldr	r3, [pc, #392]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d11c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eaa:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb6:	4b5c      	ldr	r3, [pc, #368]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x152>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1bb      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ece:	4b56      	ldr	r3, [pc, #344]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4952      	ldr	r1, [pc, #328]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	e03a      	b.n	8002f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d020      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eec:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_RCC_OscConfig+0x2b0>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe fa19 	bl	8001328 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efa:	f7fe fa15 	bl	8001328 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e19c      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4940      	ldr	r1, [pc, #256]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	e015      	b.n	8002f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <HAL_RCC_OscConfig+0x2b0>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe f9f8 	bl	8001328 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3c:	f7fe f9f4 	bl	8001328 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e17b      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4e:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d030      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d016      	beq.n	8002f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCC_OscConfig+0x2b4>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe f9d8 	bl	8001328 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7c:	f7fe f9d4 	bl	8001328 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e15b      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x200>
 8002f9a:	e015      	b.n	8002fc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9c:	4b24      	ldr	r3, [pc, #144]	; (8003030 <HAL_RCC_OscConfig+0x2b4>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fe f9c1 	bl	8001328 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002faa:	f7fe f9bd 	bl	8001328 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e144      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a0 	beq.w	8003116 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x2b8>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d121      	bne.n	8003056 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCC_OscConfig+0x2b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <HAL_RCC_OscConfig+0x2b8>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7fe f983 	bl	8001328 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e011      	b.n	800304a <HAL_RCC_OscConfig+0x2ce>
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800
 800302c:	42470000 	.word	0x42470000
 8003030:	42470e80 	.word	0x42470e80
 8003034:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fe f976 	bl	8001328 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e0fd      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x4d4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d106      	bne.n	800306c <HAL_RCC_OscConfig+0x2f0>
 800305e:	4b7d      	ldr	r3, [pc, #500]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a7c      	ldr	r2, [pc, #496]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	e01c      	b.n	80030a6 <HAL_RCC_OscConfig+0x32a>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b05      	cmp	r3, #5
 8003072:	d10c      	bne.n	800308e <HAL_RCC_OscConfig+0x312>
 8003074:	4b77      	ldr	r3, [pc, #476]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a76      	ldr	r2, [pc, #472]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 800307a:	f043 0304 	orr.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	4b74      	ldr	r3, [pc, #464]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a73      	ldr	r2, [pc, #460]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	; 0x70
 800308c:	e00b      	b.n	80030a6 <HAL_RCC_OscConfig+0x32a>
 800308e:	4b71      	ldr	r3, [pc, #452]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a70      	ldr	r2, [pc, #448]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
 800309a:	4b6e      	ldr	r3, [pc, #440]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	4a6d      	ldr	r2, [pc, #436]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d015      	beq.n	80030da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fe f93b 	bl	8001328 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f937 	bl	8001328 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0bc      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	4b61      	ldr	r3, [pc, #388]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 80030ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCC_OscConfig+0x33a>
 80030d8:	e014      	b.n	8003104 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fe f925 	bl	8001328 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	e00a      	b.n	80030f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e2:	f7fe f921 	bl	8001328 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0a6      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f8:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ee      	bne.n	80030e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b52      	ldr	r3, [pc, #328]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	4a51      	ldr	r2, [pc, #324]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8092 	beq.w	8003244 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d05c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d141      	bne.n	80031b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003134:	4b48      	ldr	r3, [pc, #288]	; (8003258 <HAL_RCC_OscConfig+0x4dc>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f8f5 	bl	8001328 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe f8f1 	bl	8001328 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e078      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	431a      	orrs	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	061b      	lsls	r3, r3, #24
 8003184:	4933      	ldr	r1, [pc, #204]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318a:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_OscConfig+0x4dc>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe f8ca 	bl	8001328 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003198:	f7fe f8c6 	bl	8001328 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e04d      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x41c>
 80031b6:	e045      	b.n	8003244 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_OscConfig+0x4dc>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe f8b3 	bl	8001328 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe f8af 	bl	8001328 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e036      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	4b1e      	ldr	r3, [pc, #120]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x44a>
 80031e4:	e02e      	b.n	8003244 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e029      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031f2:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_RCC_OscConfig+0x4d8>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	429a      	cmp	r2, r3
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d115      	bne.n	8003240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003220:	4293      	cmp	r3, r2
 8003222:	d10d      	bne.n	8003240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40007000 	.word	0x40007000
 8003254:	40023800 	.word	0x40023800
 8003258:	42470060 	.word	0x42470060

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d90c      	bls.n	8003298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d044      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e067      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fd ffec 	bl	8001328 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fd ffe8 	bl	8001328 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d20c      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4601      	mov	r1, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	5cd3      	ldrb	r3, [r2, r3]
 80033f6:	fa21 f303 	lsr.w	r3, r1, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd ff4c 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	08005368 	.word	0x08005368
 8003420:	20000040 	.word	0x20000040
 8003424:	20000044 	.word	0x20000044

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	2300      	movs	r3, #0
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343e:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b04      	cmp	r3, #4
 8003448:	d007      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x32>
 800344a:	2b08      	cmp	r3, #8
 800344c:	d008      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x38>
 800344e:	2b00      	cmp	r3, #0
 8003450:	f040 80b4 	bne.w	80035bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003456:	60bb      	str	r3, [r7, #8]
       break;
 8003458:	e0b3      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800345a:	4b5e      	ldr	r3, [pc, #376]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800345c:	60bb      	str	r3, [r7, #8]
      break;
 800345e:	e0b0      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003460:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800346a:	4b58      	ldr	r3, [pc, #352]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d04a      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b55      	ldr	r3, [pc, #340]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	f04f 0400 	mov.w	r4, #0
 8003480:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	ea03 0501 	and.w	r5, r3, r1
 800348c:	ea04 0602 	and.w	r6, r4, r2
 8003490:	4629      	mov	r1, r5
 8003492:	4632      	mov	r2, r6
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	f04f 0400 	mov.w	r4, #0
 800349c:	0154      	lsls	r4, r2, #5
 800349e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034a2:	014b      	lsls	r3, r1, #5
 80034a4:	4619      	mov	r1, r3
 80034a6:	4622      	mov	r2, r4
 80034a8:	1b49      	subs	r1, r1, r5
 80034aa:	eb62 0206 	sbc.w	r2, r2, r6
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f04f 0400 	mov.w	r4, #0
 80034b6:	0194      	lsls	r4, r2, #6
 80034b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034bc:	018b      	lsls	r3, r1, #6
 80034be:	1a5b      	subs	r3, r3, r1
 80034c0:	eb64 0402 	sbc.w	r4, r4, r2
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	00e2      	lsls	r2, r4, #3
 80034ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034d2:	00d9      	lsls	r1, r3, #3
 80034d4:	460b      	mov	r3, r1
 80034d6:	4614      	mov	r4, r2
 80034d8:	195b      	adds	r3, r3, r5
 80034da:	eb44 0406 	adc.w	r4, r4, r6
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	0262      	lsls	r2, r4, #9
 80034e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034ec:	0259      	lsls	r1, r3, #9
 80034ee:	460b      	mov	r3, r1
 80034f0:	4614      	mov	r4, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	4621      	mov	r1, r4
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f04f 0400 	mov.w	r4, #0
 80034fc:	461a      	mov	r2, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	f7fc feb6 	bl	8000270 <__aeabi_uldivmod>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e049      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350c:	4b2f      	ldr	r3, [pc, #188]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	f04f 0400 	mov.w	r4, #0
 8003516:	f240 11ff 	movw	r1, #511	; 0x1ff
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	ea03 0501 	and.w	r5, r3, r1
 8003522:	ea04 0602 	and.w	r6, r4, r2
 8003526:	4629      	mov	r1, r5
 8003528:	4632      	mov	r2, r6
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	f04f 0400 	mov.w	r4, #0
 8003532:	0154      	lsls	r4, r2, #5
 8003534:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003538:	014b      	lsls	r3, r1, #5
 800353a:	4619      	mov	r1, r3
 800353c:	4622      	mov	r2, r4
 800353e:	1b49      	subs	r1, r1, r5
 8003540:	eb62 0206 	sbc.w	r2, r2, r6
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f04f 0400 	mov.w	r4, #0
 800354c:	0194      	lsls	r4, r2, #6
 800354e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003552:	018b      	lsls	r3, r1, #6
 8003554:	1a5b      	subs	r3, r3, r1
 8003556:	eb64 0402 	sbc.w	r4, r4, r2
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	00e2      	lsls	r2, r4, #3
 8003564:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003568:	00d9      	lsls	r1, r3, #3
 800356a:	460b      	mov	r3, r1
 800356c:	4614      	mov	r4, r2
 800356e:	195b      	adds	r3, r3, r5
 8003570:	eb44 0406 	adc.w	r4, r4, r6
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	02a2      	lsls	r2, r4, #10
 800357e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003582:	0299      	lsls	r1, r3, #10
 8003584:	460b      	mov	r3, r1
 8003586:	4614      	mov	r4, r2
 8003588:	4618      	mov	r0, r3
 800358a:	4621      	mov	r1, r4
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f04f 0400 	mov.w	r4, #0
 8003592:	461a      	mov	r2, r3
 8003594:	4623      	mov	r3, r4
 8003596:	f7fc fe6b 	bl	8000270 <__aeabi_uldivmod>
 800359a:	4603      	mov	r3, r0
 800359c:	460c      	mov	r4, r1
 800359e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	60bb      	str	r3, [r7, #8]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035be:	60bb      	str	r3, [r7, #8]
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	68bb      	ldr	r3, [r7, #8]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	00f42400 	.word	0x00f42400
 80035d4:	007a1200 	.word	0x007a1200

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_GetHCLKFreq+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000040 	.word	0x20000040

080035f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035f4:	f7ff fff0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f8:	4601      	mov	r1, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0a9b      	lsrs	r3, r3, #10
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4a03      	ldr	r2, [pc, #12]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	fa21 f303 	lsr.w	r3, r1, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	08005378 	.word	0x08005378

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	4601      	mov	r1, r0
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	0b5b      	lsrs	r3, r3, #13
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	4a03      	ldr	r2, [pc, #12]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40023800 	.word	0x40023800
 800363c:	08005378 	.word	0x08005378

08003640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e01d      	b.n	800368e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fc92 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 fa72 	bl	8003b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e01d      	b.n	80036e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d106      	bne.n	80036c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fd fc45 	bl	8000f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2202      	movs	r2, #2
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f000 fa47 	bl	8003b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fc82 	bl	8004008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a15      	ldr	r2, [pc, #84]	; (8003760 <HAL_TIM_PWM_Start+0x74>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_PWM_Start+0x2c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a14      	ldr	r2, [pc, #80]	; (8003764 <HAL_TIM_PWM_Start+0x78>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_TIM_PWM_Start+0x30>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_TIM_PWM_Start+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d007      	beq.n	8003754 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40010000 	.word	0x40010000
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9be 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9b0 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f9c1 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f994 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f986 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f997 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f96a 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f95c 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f96d 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f940 	bl	8003b2c <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f932 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f943 	bl	8003b40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f90c 	bl	8003b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fc24 	bl	8004160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d10e      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b40      	cmp	r3, #64	; 0x40
 8003932:	d107      	bne.n	8003944 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f908 	bl	8003b54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	d10e      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d107      	bne.n	8003970 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0220 	mvn.w	r2, #32
 8003968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fbee 	bl	800414c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800398e:	2302      	movs	r3, #2
 8003990:	e0b4      	b.n	8003afc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	f200 809f 	bhi.w	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	08003ae9 	.word	0x08003ae9
 80039b8:	08003ae9 	.word	0x08003ae9
 80039bc:	08003ae9 	.word	0x08003ae9
 80039c0:	08003a25 	.word	0x08003a25
 80039c4:	08003ae9 	.word	0x08003ae9
 80039c8:	08003ae9 	.word	0x08003ae9
 80039cc:	08003ae9 	.word	0x08003ae9
 80039d0:	08003a67 	.word	0x08003a67
 80039d4:	08003ae9 	.word	0x08003ae9
 80039d8:	08003ae9 	.word	0x08003ae9
 80039dc:	08003ae9 	.word	0x08003ae9
 80039e0:	08003aa7 	.word	0x08003aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f95c 	bl	8003ca8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0208 	orr.w	r2, r2, #8
 80039fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6999      	ldr	r1, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	619a      	str	r2, [r3, #24]
      break;
 8003a22:	e062      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f9ac 	bl	8003d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6999      	ldr	r1, [r3, #24]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	021a      	lsls	r2, r3, #8
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	619a      	str	r2, [r3, #24]
      break;
 8003a64:	e041      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fa01 	bl	8003e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0208 	orr.w	r2, r2, #8
 8003a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0204 	bic.w	r2, r2, #4
 8003a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69d9      	ldr	r1, [r3, #28]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	61da      	str	r2, [r3, #28]
      break;
 8003aa4:	e021      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fa55 	bl	8003f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69d9      	ldr	r1, [r3, #28]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	021a      	lsls	r2, r3, #8
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	61da      	str	r2, [r3, #28]
      break;
 8003ae6:	e000      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003ae8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <TIM_Base_SetConfig+0x114>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d00f      	beq.n	8003ba8 <TIM_Base_SetConfig+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a3d      	ldr	r2, [pc, #244]	; (8003c80 <TIM_Base_SetConfig+0x118>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00b      	beq.n	8003ba8 <TIM_Base_SetConfig+0x40>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a3c      	ldr	r2, [pc, #240]	; (8003c84 <TIM_Base_SetConfig+0x11c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d007      	beq.n	8003ba8 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <TIM_Base_SetConfig+0x120>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a3a      	ldr	r2, [pc, #232]	; (8003c8c <TIM_Base_SetConfig+0x124>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d108      	bne.n	8003bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	; (8003c7c <TIM_Base_SetConfig+0x114>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02b      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc8:	d027      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2c      	ldr	r2, [pc, #176]	; (8003c80 <TIM_Base_SetConfig+0x118>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d023      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	; (8003c84 <TIM_Base_SetConfig+0x11c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d01f      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <TIM_Base_SetConfig+0x120>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01b      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a29      	ldr	r2, [pc, #164]	; (8003c8c <TIM_Base_SetConfig+0x124>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d017      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <TIM_Base_SetConfig+0x128>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d013      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <TIM_Base_SetConfig+0x12c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d00f      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <TIM_Base_SetConfig+0x130>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <TIM_Base_SetConfig+0x134>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d007      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <TIM_Base_SetConfig+0x138>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d003      	beq.n	8003c1a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <TIM_Base_SetConfig+0x13c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <TIM_Base_SetConfig+0x114>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0xf8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <TIM_Base_SetConfig+0x124>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d103      	bne.n	8003c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	615a      	str	r2, [r3, #20]
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40010400 	.word	0x40010400
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40014400 	.word	0x40014400
 8003c98:	40014800 	.word	0x40014800
 8003c9c:	40001800 	.word	0x40001800
 8003ca0:	40001c00 	.word	0x40001c00
 8003ca4:	40002000 	.word	0x40002000

08003ca8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f023 0201 	bic.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 0302 	bic.w	r3, r3, #2
 8003cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <TIM_OC1_SetConfig+0xd8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC1_SetConfig+0x64>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <TIM_OC1_SetConfig+0xdc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10c      	bne.n	8003d26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0308 	bic.w	r3, r3, #8
 8003d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <TIM_OC1_SetConfig+0xd8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC1_SetConfig+0x8e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a14      	ldr	r2, [pc, #80]	; (8003d84 <TIM_OC1_SetConfig+0xdc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d111      	bne.n	8003d5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40010400 	.word	0x40010400

08003d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0210 	bic.w	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0320 	bic.w	r3, r3, #32
 8003dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <TIM_OC2_SetConfig+0xe4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d003      	beq.n	8003df0 <TIM_OC2_SetConfig+0x68>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <TIM_OC2_SetConfig+0xe8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10d      	bne.n	8003e0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <TIM_OC2_SetConfig+0xe4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC2_SetConfig+0x94>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <TIM_OC2_SetConfig+0xe8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d113      	bne.n	8003e44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40010400 	.word	0x40010400

08003e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0303 	bic.w	r3, r3, #3
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <TIM_OC3_SetConfig+0xe0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_OC3_SetConfig+0x66>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a20      	ldr	r2, [pc, #128]	; (8003f58 <TIM_OC3_SetConfig+0xe4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10d      	bne.n	8003ef6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <TIM_OC3_SetConfig+0xe0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_OC3_SetConfig+0x92>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a15      	ldr	r2, [pc, #84]	; (8003f58 <TIM_OC3_SetConfig+0xe4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d113      	bne.n	8003f2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	621a      	str	r2, [r3, #32]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40010400 	.word	0x40010400

08003f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	031b      	lsls	r3, r3, #12
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <TIM_OC4_SetConfig+0xa4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC4_SetConfig+0x68>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a11      	ldr	r2, [pc, #68]	; (8004004 <TIM_OC4_SetConfig+0xa8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d109      	bne.n	8003fd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	019b      	lsls	r3, r3, #6
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40010400 	.word	0x40010400

08004008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004068:	2302      	movs	r3, #2
 800406a:	e05a      	b.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d022      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d01d      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d018      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1a      	ldr	r2, [pc, #104]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00e      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d004      	beq.n	80040f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10c      	bne.n	8004110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	4313      	orrs	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40001800 	.word	0x40001800

0800414c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e03f      	b.n	8004206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d106      	bne.n	80041a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fc ff5a 	bl	8001054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	; 0x24
 80041a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f90b 	bl	80043d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b088      	sub	sp, #32
 8004212:	af02      	add	r7, sp, #8
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	f040 8083 	bne.w	8004336 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_UART_Transmit+0x2e>
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e07b      	b.n	8004338 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_UART_Transmit+0x40>
 800424a:	2302      	movs	r3, #2
 800424c:	e074      	b.n	8004338 <HAL_UART_Transmit+0x12a>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2221      	movs	r2, #33	; 0x21
 8004260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004264:	f7fd f860 	bl	8001328 <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800427e:	e042      	b.n	8004306 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004296:	d122      	bne.n	80042de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2200      	movs	r2, #0
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f84c 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e042      	b.n	8004338 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d103      	bne.n	80042d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3302      	adds	r3, #2
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	e017      	b.n	8004306 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	3301      	adds	r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
 80042dc:	e013      	b.n	8004306 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	2180      	movs	r1, #128	; 0x80
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f829 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e01f      	b.n	8004338 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	60ba      	str	r2, [r7, #8]
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1b7      	bne.n	8004280 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2200      	movs	r2, #0
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f810 	bl	8004340 <UART_WaitOnFlagUntilTimeout>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e006      	b.n	8004338 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004350:	e02c      	b.n	80043ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d028      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <UART_WaitOnFlagUntilTimeout+0x30>
 8004360:	f7fc ffe2 	bl	8001328 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	429a      	cmp	r2, r3
 800436e:	d21d      	bcs.n	80043ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800437e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e00f      	b.n	80043cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	461a      	mov	r2, r3
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d0c3      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004416:	f023 030c 	bic.w	r3, r3, #12
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	430b      	orrs	r3, r1
 8004422:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004442:	f040 818b 	bne.w	800475c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4ac1      	ldr	r2, [pc, #772]	; (8004750 <UART_SetConfig+0x37c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d005      	beq.n	800445c <UART_SetConfig+0x88>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4abf      	ldr	r2, [pc, #764]	; (8004754 <UART_SetConfig+0x380>)
 8004456:	4293      	cmp	r3, r2
 8004458:	f040 80bd 	bne.w	80045d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800445c:	f7ff f8dc 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8004460:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	461d      	mov	r5, r3
 8004466:	f04f 0600 	mov.w	r6, #0
 800446a:	46a8      	mov	r8, r5
 800446c:	46b1      	mov	r9, r6
 800446e:	eb18 0308 	adds.w	r3, r8, r8
 8004472:	eb49 0409 	adc.w	r4, r9, r9
 8004476:	4698      	mov	r8, r3
 8004478:	46a1      	mov	r9, r4
 800447a:	eb18 0805 	adds.w	r8, r8, r5
 800447e:	eb49 0906 	adc.w	r9, r9, r6
 8004482:	f04f 0100 	mov.w	r1, #0
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800448e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004492:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004496:	4688      	mov	r8, r1
 8004498:	4691      	mov	r9, r2
 800449a:	eb18 0005 	adds.w	r0, r8, r5
 800449e:	eb49 0106 	adc.w	r1, r9, r6
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	461d      	mov	r5, r3
 80044a8:	f04f 0600 	mov.w	r6, #0
 80044ac:	196b      	adds	r3, r5, r5
 80044ae:	eb46 0406 	adc.w	r4, r6, r6
 80044b2:	461a      	mov	r2, r3
 80044b4:	4623      	mov	r3, r4
 80044b6:	f7fb fedb 	bl	8000270 <__aeabi_uldivmod>
 80044ba:	4603      	mov	r3, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	461a      	mov	r2, r3
 80044c0:	4ba5      	ldr	r3, [pc, #660]	; (8004758 <UART_SetConfig+0x384>)
 80044c2:	fba3 2302 	umull	r2, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	461d      	mov	r5, r3
 80044d0:	f04f 0600 	mov.w	r6, #0
 80044d4:	46a9      	mov	r9, r5
 80044d6:	46b2      	mov	sl, r6
 80044d8:	eb19 0309 	adds.w	r3, r9, r9
 80044dc:	eb4a 040a 	adc.w	r4, sl, sl
 80044e0:	4699      	mov	r9, r3
 80044e2:	46a2      	mov	sl, r4
 80044e4:	eb19 0905 	adds.w	r9, r9, r5
 80044e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004500:	4689      	mov	r9, r1
 8004502:	4692      	mov	sl, r2
 8004504:	eb19 0005 	adds.w	r0, r9, r5
 8004508:	eb4a 0106 	adc.w	r1, sl, r6
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	461d      	mov	r5, r3
 8004512:	f04f 0600 	mov.w	r6, #0
 8004516:	196b      	adds	r3, r5, r5
 8004518:	eb46 0406 	adc.w	r4, r6, r6
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	f7fb fea6 	bl	8000270 <__aeabi_uldivmod>
 8004524:	4603      	mov	r3, r0
 8004526:	460c      	mov	r4, r1
 8004528:	461a      	mov	r2, r3
 800452a:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <UART_SetConfig+0x384>)
 800452c:	fba3 1302 	umull	r1, r3, r3, r2
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	2164      	movs	r1, #100	; 0x64
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	3332      	adds	r3, #50	; 0x32
 800453e:	4a86      	ldr	r2, [pc, #536]	; (8004758 <UART_SetConfig+0x384>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800454c:	4498      	add	r8, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	461d      	mov	r5, r3
 8004552:	f04f 0600 	mov.w	r6, #0
 8004556:	46a9      	mov	r9, r5
 8004558:	46b2      	mov	sl, r6
 800455a:	eb19 0309 	adds.w	r3, r9, r9
 800455e:	eb4a 040a 	adc.w	r4, sl, sl
 8004562:	4699      	mov	r9, r3
 8004564:	46a2      	mov	sl, r4
 8004566:	eb19 0905 	adds.w	r9, r9, r5
 800456a:	eb4a 0a06 	adc.w	sl, sl, r6
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800457a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800457e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004582:	4689      	mov	r9, r1
 8004584:	4692      	mov	sl, r2
 8004586:	eb19 0005 	adds.w	r0, r9, r5
 800458a:	eb4a 0106 	adc.w	r1, sl, r6
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	461d      	mov	r5, r3
 8004594:	f04f 0600 	mov.w	r6, #0
 8004598:	196b      	adds	r3, r5, r5
 800459a:	eb46 0406 	adc.w	r4, r6, r6
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7fb fe65 	bl	8000270 <__aeabi_uldivmod>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b6a      	ldr	r3, [pc, #424]	; (8004758 <UART_SetConfig+0x384>)
 80045ae:	fba3 1302 	umull	r1, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2164      	movs	r1, #100	; 0x64
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	3332      	adds	r3, #50	; 0x32
 80045c0:	4a65      	ldr	r2, [pc, #404]	; (8004758 <UART_SetConfig+0x384>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 0207 	and.w	r2, r3, #7
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4442      	add	r2, r8
 80045d2:	609a      	str	r2, [r3, #8]
 80045d4:	e26f      	b.n	8004ab6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045d6:	f7ff f80b 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 80045da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	461d      	mov	r5, r3
 80045e0:	f04f 0600 	mov.w	r6, #0
 80045e4:	46a8      	mov	r8, r5
 80045e6:	46b1      	mov	r9, r6
 80045e8:	eb18 0308 	adds.w	r3, r8, r8
 80045ec:	eb49 0409 	adc.w	r4, r9, r9
 80045f0:	4698      	mov	r8, r3
 80045f2:	46a1      	mov	r9, r4
 80045f4:	eb18 0805 	adds.w	r8, r8, r5
 80045f8:	eb49 0906 	adc.w	r9, r9, r6
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004608:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800460c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004610:	4688      	mov	r8, r1
 8004612:	4691      	mov	r9, r2
 8004614:	eb18 0005 	adds.w	r0, r8, r5
 8004618:	eb49 0106 	adc.w	r1, r9, r6
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	461d      	mov	r5, r3
 8004622:	f04f 0600 	mov.w	r6, #0
 8004626:	196b      	adds	r3, r5, r5
 8004628:	eb46 0406 	adc.w	r4, r6, r6
 800462c:	461a      	mov	r2, r3
 800462e:	4623      	mov	r3, r4
 8004630:	f7fb fe1e 	bl	8000270 <__aeabi_uldivmod>
 8004634:	4603      	mov	r3, r0
 8004636:	460c      	mov	r4, r1
 8004638:	461a      	mov	r2, r3
 800463a:	4b47      	ldr	r3, [pc, #284]	; (8004758 <UART_SetConfig+0x384>)
 800463c:	fba3 2302 	umull	r2, r3, r3, r2
 8004640:	095b      	lsrs	r3, r3, #5
 8004642:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	461d      	mov	r5, r3
 800464a:	f04f 0600 	mov.w	r6, #0
 800464e:	46a9      	mov	r9, r5
 8004650:	46b2      	mov	sl, r6
 8004652:	eb19 0309 	adds.w	r3, r9, r9
 8004656:	eb4a 040a 	adc.w	r4, sl, sl
 800465a:	4699      	mov	r9, r3
 800465c:	46a2      	mov	sl, r4
 800465e:	eb19 0905 	adds.w	r9, r9, r5
 8004662:	eb4a 0a06 	adc.w	sl, sl, r6
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004672:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004676:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800467a:	4689      	mov	r9, r1
 800467c:	4692      	mov	sl, r2
 800467e:	eb19 0005 	adds.w	r0, r9, r5
 8004682:	eb4a 0106 	adc.w	r1, sl, r6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	461d      	mov	r5, r3
 800468c:	f04f 0600 	mov.w	r6, #0
 8004690:	196b      	adds	r3, r5, r5
 8004692:	eb46 0406 	adc.w	r4, r6, r6
 8004696:	461a      	mov	r2, r3
 8004698:	4623      	mov	r3, r4
 800469a:	f7fb fde9 	bl	8000270 <__aeabi_uldivmod>
 800469e:	4603      	mov	r3, r0
 80046a0:	460c      	mov	r4, r1
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b2c      	ldr	r3, [pc, #176]	; (8004758 <UART_SetConfig+0x384>)
 80046a6:	fba3 1302 	umull	r1, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2164      	movs	r1, #100	; 0x64
 80046ae:	fb01 f303 	mul.w	r3, r1, r3
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	3332      	adds	r3, #50	; 0x32
 80046b8:	4a27      	ldr	r2, [pc, #156]	; (8004758 <UART_SetConfig+0x384>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046c6:	4498      	add	r8, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	461d      	mov	r5, r3
 80046cc:	f04f 0600 	mov.w	r6, #0
 80046d0:	46a9      	mov	r9, r5
 80046d2:	46b2      	mov	sl, r6
 80046d4:	eb19 0309 	adds.w	r3, r9, r9
 80046d8:	eb4a 040a 	adc.w	r4, sl, sl
 80046dc:	4699      	mov	r9, r3
 80046de:	46a2      	mov	sl, r4
 80046e0:	eb19 0905 	adds.w	r9, r9, r5
 80046e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046fc:	4689      	mov	r9, r1
 80046fe:	4692      	mov	sl, r2
 8004700:	eb19 0005 	adds.w	r0, r9, r5
 8004704:	eb4a 0106 	adc.w	r1, sl, r6
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	461d      	mov	r5, r3
 800470e:	f04f 0600 	mov.w	r6, #0
 8004712:	196b      	adds	r3, r5, r5
 8004714:	eb46 0406 	adc.w	r4, r6, r6
 8004718:	461a      	mov	r2, r3
 800471a:	4623      	mov	r3, r4
 800471c:	f7fb fda8 	bl	8000270 <__aeabi_uldivmod>
 8004720:	4603      	mov	r3, r0
 8004722:	460c      	mov	r4, r1
 8004724:	461a      	mov	r2, r3
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <UART_SetConfig+0x384>)
 8004728:	fba3 1302 	umull	r1, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	2164      	movs	r1, #100	; 0x64
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	3332      	adds	r3, #50	; 0x32
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <UART_SetConfig+0x384>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	f003 0207 	and.w	r2, r3, #7
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4442      	add	r2, r8
 800474c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800474e:	e1b2      	b.n	8004ab6 <UART_SetConfig+0x6e2>
 8004750:	40011000 	.word	0x40011000
 8004754:	40011400 	.word	0x40011400
 8004758:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4ad7      	ldr	r2, [pc, #860]	; (8004ac0 <UART_SetConfig+0x6ec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d005      	beq.n	8004772 <UART_SetConfig+0x39e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4ad6      	ldr	r2, [pc, #856]	; (8004ac4 <UART_SetConfig+0x6f0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	f040 80d1 	bne.w	8004914 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004772:	f7fe ff51 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8004776:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	469a      	mov	sl, r3
 800477c:	f04f 0b00 	mov.w	fp, #0
 8004780:	46d0      	mov	r8, sl
 8004782:	46d9      	mov	r9, fp
 8004784:	eb18 0308 	adds.w	r3, r8, r8
 8004788:	eb49 0409 	adc.w	r4, r9, r9
 800478c:	4698      	mov	r8, r3
 800478e:	46a1      	mov	r9, r4
 8004790:	eb18 080a 	adds.w	r8, r8, sl
 8004794:	eb49 090b 	adc.w	r9, r9, fp
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047ac:	4688      	mov	r8, r1
 80047ae:	4691      	mov	r9, r2
 80047b0:	eb1a 0508 	adds.w	r5, sl, r8
 80047b4:	eb4b 0609 	adc.w	r6, fp, r9
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4619      	mov	r1, r3
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	f04f 0400 	mov.w	r4, #0
 80047ca:	0094      	lsls	r4, r2, #2
 80047cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80047d0:	008b      	lsls	r3, r1, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	4623      	mov	r3, r4
 80047d6:	4628      	mov	r0, r5
 80047d8:	4631      	mov	r1, r6
 80047da:	f7fb fd49 	bl	8000270 <__aeabi_uldivmod>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	461a      	mov	r2, r3
 80047e4:	4bb8      	ldr	r3, [pc, #736]	; (8004ac8 <UART_SetConfig+0x6f4>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	469b      	mov	fp, r3
 80047f4:	f04f 0c00 	mov.w	ip, #0
 80047f8:	46d9      	mov	r9, fp
 80047fa:	46e2      	mov	sl, ip
 80047fc:	eb19 0309 	adds.w	r3, r9, r9
 8004800:	eb4a 040a 	adc.w	r4, sl, sl
 8004804:	4699      	mov	r9, r3
 8004806:	46a2      	mov	sl, r4
 8004808:	eb19 090b 	adds.w	r9, r9, fp
 800480c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800481c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004820:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004824:	4689      	mov	r9, r1
 8004826:	4692      	mov	sl, r2
 8004828:	eb1b 0509 	adds.w	r5, fp, r9
 800482c:	eb4c 060a 	adc.w	r6, ip, sl
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4619      	mov	r1, r3
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	f04f 0400 	mov.w	r4, #0
 8004842:	0094      	lsls	r4, r2, #2
 8004844:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004848:	008b      	lsls	r3, r1, #2
 800484a:	461a      	mov	r2, r3
 800484c:	4623      	mov	r3, r4
 800484e:	4628      	mov	r0, r5
 8004850:	4631      	mov	r1, r6
 8004852:	f7fb fd0d 	bl	8000270 <__aeabi_uldivmod>
 8004856:	4603      	mov	r3, r0
 8004858:	460c      	mov	r4, r1
 800485a:	461a      	mov	r2, r3
 800485c:	4b9a      	ldr	r3, [pc, #616]	; (8004ac8 <UART_SetConfig+0x6f4>)
 800485e:	fba3 1302 	umull	r1, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2164      	movs	r1, #100	; 0x64
 8004866:	fb01 f303 	mul.w	r3, r1, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	3332      	adds	r3, #50	; 0x32
 8004870:	4a95      	ldr	r2, [pc, #596]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487c:	4498      	add	r8, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	469b      	mov	fp, r3
 8004882:	f04f 0c00 	mov.w	ip, #0
 8004886:	46d9      	mov	r9, fp
 8004888:	46e2      	mov	sl, ip
 800488a:	eb19 0309 	adds.w	r3, r9, r9
 800488e:	eb4a 040a 	adc.w	r4, sl, sl
 8004892:	4699      	mov	r9, r3
 8004894:	46a2      	mov	sl, r4
 8004896:	eb19 090b 	adds.w	r9, r9, fp
 800489a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048b2:	4689      	mov	r9, r1
 80048b4:	4692      	mov	sl, r2
 80048b6:	eb1b 0509 	adds.w	r5, fp, r9
 80048ba:	eb4c 060a 	adc.w	r6, ip, sl
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	4619      	mov	r1, r3
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	f04f 0400 	mov.w	r4, #0
 80048d0:	0094      	lsls	r4, r2, #2
 80048d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048d6:	008b      	lsls	r3, r1, #2
 80048d8:	461a      	mov	r2, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	4628      	mov	r0, r5
 80048de:	4631      	mov	r1, r6
 80048e0:	f7fb fcc6 	bl	8000270 <__aeabi_uldivmod>
 80048e4:	4603      	mov	r3, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b77      	ldr	r3, [pc, #476]	; (8004ac8 <UART_SetConfig+0x6f4>)
 80048ec:	fba3 1302 	umull	r1, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	3332      	adds	r3, #50	; 0x32
 80048fe:	4a72      	ldr	r2, [pc, #456]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 020f 	and.w	r2, r3, #15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4442      	add	r2, r8
 8004910:	609a      	str	r2, [r3, #8]
 8004912:	e0d0      	b.n	8004ab6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004914:	f7fe fe6c 	bl	80035f0 <HAL_RCC_GetPCLK1Freq>
 8004918:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	469a      	mov	sl, r3
 800491e:	f04f 0b00 	mov.w	fp, #0
 8004922:	46d0      	mov	r8, sl
 8004924:	46d9      	mov	r9, fp
 8004926:	eb18 0308 	adds.w	r3, r8, r8
 800492a:	eb49 0409 	adc.w	r4, r9, r9
 800492e:	4698      	mov	r8, r3
 8004930:	46a1      	mov	r9, r4
 8004932:	eb18 080a 	adds.w	r8, r8, sl
 8004936:	eb49 090b 	adc.w	r9, r9, fp
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004946:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800494a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800494e:	4688      	mov	r8, r1
 8004950:	4691      	mov	r9, r2
 8004952:	eb1a 0508 	adds.w	r5, sl, r8
 8004956:	eb4b 0609 	adc.w	r6, fp, r9
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4619      	mov	r1, r3
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	f04f 0400 	mov.w	r4, #0
 800496c:	0094      	lsls	r4, r2, #2
 800496e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004972:	008b      	lsls	r3, r1, #2
 8004974:	461a      	mov	r2, r3
 8004976:	4623      	mov	r3, r4
 8004978:	4628      	mov	r0, r5
 800497a:	4631      	mov	r1, r6
 800497c:	f7fb fc78 	bl	8000270 <__aeabi_uldivmod>
 8004980:	4603      	mov	r3, r0
 8004982:	460c      	mov	r4, r1
 8004984:	461a      	mov	r2, r3
 8004986:	4b50      	ldr	r3, [pc, #320]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004988:	fba3 2302 	umull	r2, r3, r3, r2
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	469b      	mov	fp, r3
 8004996:	f04f 0c00 	mov.w	ip, #0
 800499a:	46d9      	mov	r9, fp
 800499c:	46e2      	mov	sl, ip
 800499e:	eb19 0309 	adds.w	r3, r9, r9
 80049a2:	eb4a 040a 	adc.w	r4, sl, sl
 80049a6:	4699      	mov	r9, r3
 80049a8:	46a2      	mov	sl, r4
 80049aa:	eb19 090b 	adds.w	r9, r9, fp
 80049ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049c6:	4689      	mov	r9, r1
 80049c8:	4692      	mov	sl, r2
 80049ca:	eb1b 0509 	adds.w	r5, fp, r9
 80049ce:	eb4c 060a 	adc.w	r6, ip, sl
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	4619      	mov	r1, r3
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	f04f 0400 	mov.w	r4, #0
 80049e4:	0094      	lsls	r4, r2, #2
 80049e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049ea:	008b      	lsls	r3, r1, #2
 80049ec:	461a      	mov	r2, r3
 80049ee:	4623      	mov	r3, r4
 80049f0:	4628      	mov	r0, r5
 80049f2:	4631      	mov	r1, r6
 80049f4:	f7fb fc3c 	bl	8000270 <__aeabi_uldivmod>
 80049f8:	4603      	mov	r3, r0
 80049fa:	460c      	mov	r4, r1
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004a00:	fba3 1302 	umull	r1, r3, r3, r2
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	2164      	movs	r1, #100	; 0x64
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	3332      	adds	r3, #50	; 0x32
 8004a12:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004a14:	fba2 2303 	umull	r2, r3, r2, r3
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a1e:	4498      	add	r8, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	469b      	mov	fp, r3
 8004a24:	f04f 0c00 	mov.w	ip, #0
 8004a28:	46d9      	mov	r9, fp
 8004a2a:	46e2      	mov	sl, ip
 8004a2c:	eb19 0309 	adds.w	r3, r9, r9
 8004a30:	eb4a 040a 	adc.w	r4, sl, sl
 8004a34:	4699      	mov	r9, r3
 8004a36:	46a2      	mov	sl, r4
 8004a38:	eb19 090b 	adds.w	r9, r9, fp
 8004a3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a54:	4689      	mov	r9, r1
 8004a56:	4692      	mov	sl, r2
 8004a58:	eb1b 0509 	adds.w	r5, fp, r9
 8004a5c:	eb4c 060a 	adc.w	r6, ip, sl
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4619      	mov	r1, r3
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	f04f 0400 	mov.w	r4, #0
 8004a72:	0094      	lsls	r4, r2, #2
 8004a74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a78:	008b      	lsls	r3, r1, #2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	4631      	mov	r1, r6
 8004a82:	f7fb fbf5 	bl	8000270 <__aeabi_uldivmod>
 8004a86:	4603      	mov	r3, r0
 8004a88:	460c      	mov	r4, r1
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004a8e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2164      	movs	r1, #100	; 0x64
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	3332      	adds	r3, #50	; 0x32
 8004aa0:	4a09      	ldr	r2, [pc, #36]	; (8004ac8 <UART_SetConfig+0x6f4>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4442      	add	r2, r8
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	e7ff      	b.n	8004ab6 <UART_SetConfig+0x6e2>
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac0:	40011000 	.word	0x40011000
 8004ac4:	40011400 	.word	0x40011400
 8004ac8:	51eb851f 	.word	0x51eb851f

08004acc <__errno>:
 8004acc:	4b01      	ldr	r3, [pc, #4]	; (8004ad4 <__errno+0x8>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000004c 	.word	0x2000004c

08004ad8 <__libc_init_array>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4e0d      	ldr	r6, [pc, #52]	; (8004b10 <__libc_init_array+0x38>)
 8004adc:	4c0d      	ldr	r4, [pc, #52]	; (8004b14 <__libc_init_array+0x3c>)
 8004ade:	1ba4      	subs	r4, r4, r6
 8004ae0:	10a4      	asrs	r4, r4, #2
 8004ae2:	2500      	movs	r5, #0
 8004ae4:	42a5      	cmp	r5, r4
 8004ae6:	d109      	bne.n	8004afc <__libc_init_array+0x24>
 8004ae8:	4e0b      	ldr	r6, [pc, #44]	; (8004b18 <__libc_init_array+0x40>)
 8004aea:	4c0c      	ldr	r4, [pc, #48]	; (8004b1c <__libc_init_array+0x44>)
 8004aec:	f000 fc26 	bl	800533c <_init>
 8004af0:	1ba4      	subs	r4, r4, r6
 8004af2:	10a4      	asrs	r4, r4, #2
 8004af4:	2500      	movs	r5, #0
 8004af6:	42a5      	cmp	r5, r4
 8004af8:	d105      	bne.n	8004b06 <__libc_init_array+0x2e>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b00:	4798      	blx	r3
 8004b02:	3501      	adds	r5, #1
 8004b04:	e7ee      	b.n	8004ae4 <__libc_init_array+0xc>
 8004b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b0a:	4798      	blx	r3
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	e7f2      	b.n	8004af6 <__libc_init_array+0x1e>
 8004b10:	080053c4 	.word	0x080053c4
 8004b14:	080053c4 	.word	0x080053c4
 8004b18:	080053c4 	.word	0x080053c4
 8004b1c:	080053c8 	.word	0x080053c8

08004b20 <memset>:
 8004b20:	4402      	add	r2, r0
 8004b22:	4603      	mov	r3, r0
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d100      	bne.n	8004b2a <memset+0xa>
 8004b28:	4770      	bx	lr
 8004b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2e:	e7f9      	b.n	8004b24 <memset+0x4>

08004b30 <siprintf>:
 8004b30:	b40e      	push	{r1, r2, r3}
 8004b32:	b500      	push	{lr}
 8004b34:	b09c      	sub	sp, #112	; 0x70
 8004b36:	ab1d      	add	r3, sp, #116	; 0x74
 8004b38:	9002      	str	r0, [sp, #8]
 8004b3a:	9006      	str	r0, [sp, #24]
 8004b3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b40:	4809      	ldr	r0, [pc, #36]	; (8004b68 <siprintf+0x38>)
 8004b42:	9107      	str	r1, [sp, #28]
 8004b44:	9104      	str	r1, [sp, #16]
 8004b46:	4909      	ldr	r1, [pc, #36]	; (8004b6c <siprintf+0x3c>)
 8004b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b4c:	9105      	str	r1, [sp, #20]
 8004b4e:	6800      	ldr	r0, [r0, #0]
 8004b50:	9301      	str	r3, [sp, #4]
 8004b52:	a902      	add	r1, sp, #8
 8004b54:	f000 f866 	bl	8004c24 <_svfiprintf_r>
 8004b58:	9b02      	ldr	r3, [sp, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	b01c      	add	sp, #112	; 0x70
 8004b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b64:	b003      	add	sp, #12
 8004b66:	4770      	bx	lr
 8004b68:	2000004c 	.word	0x2000004c
 8004b6c:	ffff0208 	.word	0xffff0208

08004b70 <__ssputs_r>:
 8004b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b74:	688e      	ldr	r6, [r1, #8]
 8004b76:	429e      	cmp	r6, r3
 8004b78:	4682      	mov	sl, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4690      	mov	r8, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	d837      	bhi.n	8004bf2 <__ssputs_r+0x82>
 8004b82:	898a      	ldrh	r2, [r1, #12]
 8004b84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b88:	d031      	beq.n	8004bee <__ssputs_r+0x7e>
 8004b8a:	6825      	ldr	r5, [r4, #0]
 8004b8c:	6909      	ldr	r1, [r1, #16]
 8004b8e:	1a6f      	subs	r7, r5, r1
 8004b90:	6965      	ldr	r5, [r4, #20]
 8004b92:	2302      	movs	r3, #2
 8004b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b98:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b9c:	f109 0301 	add.w	r3, r9, #1
 8004ba0:	443b      	add	r3, r7
 8004ba2:	429d      	cmp	r5, r3
 8004ba4:	bf38      	it	cc
 8004ba6:	461d      	movcc	r5, r3
 8004ba8:	0553      	lsls	r3, r2, #21
 8004baa:	d530      	bpl.n	8004c0e <__ssputs_r+0x9e>
 8004bac:	4629      	mov	r1, r5
 8004bae:	f000 fb2b 	bl	8005208 <_malloc_r>
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	b950      	cbnz	r0, 8004bcc <__ssputs_r+0x5c>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	f8ca 3000 	str.w	r3, [sl]
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	463a      	mov	r2, r7
 8004bce:	6921      	ldr	r1, [r4, #16]
 8004bd0:	f000 faa8 	bl	8005124 <memcpy>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	6126      	str	r6, [r4, #16]
 8004be2:	6165      	str	r5, [r4, #20]
 8004be4:	443e      	add	r6, r7
 8004be6:	1bed      	subs	r5, r5, r7
 8004be8:	6026      	str	r6, [r4, #0]
 8004bea:	60a5      	str	r5, [r4, #8]
 8004bec:	464e      	mov	r6, r9
 8004bee:	454e      	cmp	r6, r9
 8004bf0:	d900      	bls.n	8004bf4 <__ssputs_r+0x84>
 8004bf2:	464e      	mov	r6, r9
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	4641      	mov	r1, r8
 8004bf8:	6820      	ldr	r0, [r4, #0]
 8004bfa:	f000 fa9e 	bl	800513a <memmove>
 8004bfe:	68a3      	ldr	r3, [r4, #8]
 8004c00:	1b9b      	subs	r3, r3, r6
 8004c02:	60a3      	str	r3, [r4, #8]
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	441e      	add	r6, r3
 8004c08:	6026      	str	r6, [r4, #0]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e7dc      	b.n	8004bc8 <__ssputs_r+0x58>
 8004c0e:	462a      	mov	r2, r5
 8004c10:	f000 fb54 	bl	80052bc <_realloc_r>
 8004c14:	4606      	mov	r6, r0
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d1e2      	bne.n	8004be0 <__ssputs_r+0x70>
 8004c1a:	6921      	ldr	r1, [r4, #16]
 8004c1c:	4650      	mov	r0, sl
 8004c1e:	f000 faa5 	bl	800516c <_free_r>
 8004c22:	e7c8      	b.n	8004bb6 <__ssputs_r+0x46>

08004c24 <_svfiprintf_r>:
 8004c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c28:	461d      	mov	r5, r3
 8004c2a:	898b      	ldrh	r3, [r1, #12]
 8004c2c:	061f      	lsls	r7, r3, #24
 8004c2e:	b09d      	sub	sp, #116	; 0x74
 8004c30:	4680      	mov	r8, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	4616      	mov	r6, r2
 8004c36:	d50f      	bpl.n	8004c58 <_svfiprintf_r+0x34>
 8004c38:	690b      	ldr	r3, [r1, #16]
 8004c3a:	b96b      	cbnz	r3, 8004c58 <_svfiprintf_r+0x34>
 8004c3c:	2140      	movs	r1, #64	; 0x40
 8004c3e:	f000 fae3 	bl	8005208 <_malloc_r>
 8004c42:	6020      	str	r0, [r4, #0]
 8004c44:	6120      	str	r0, [r4, #16]
 8004c46:	b928      	cbnz	r0, 8004c54 <_svfiprintf_r+0x30>
 8004c48:	230c      	movs	r3, #12
 8004c4a:	f8c8 3000 	str.w	r3, [r8]
 8004c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c52:	e0c8      	b.n	8004de6 <_svfiprintf_r+0x1c2>
 8004c54:	2340      	movs	r3, #64	; 0x40
 8004c56:	6163      	str	r3, [r4, #20]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c62:	2330      	movs	r3, #48	; 0x30
 8004c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c68:	9503      	str	r5, [sp, #12]
 8004c6a:	f04f 0b01 	mov.w	fp, #1
 8004c6e:	4637      	mov	r7, r6
 8004c70:	463d      	mov	r5, r7
 8004c72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c76:	b10b      	cbz	r3, 8004c7c <_svfiprintf_r+0x58>
 8004c78:	2b25      	cmp	r3, #37	; 0x25
 8004c7a:	d13e      	bne.n	8004cfa <_svfiprintf_r+0xd6>
 8004c7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c80:	d00b      	beq.n	8004c9a <_svfiprintf_r+0x76>
 8004c82:	4653      	mov	r3, sl
 8004c84:	4632      	mov	r2, r6
 8004c86:	4621      	mov	r1, r4
 8004c88:	4640      	mov	r0, r8
 8004c8a:	f7ff ff71 	bl	8004b70 <__ssputs_r>
 8004c8e:	3001      	adds	r0, #1
 8004c90:	f000 80a4 	beq.w	8004ddc <_svfiprintf_r+0x1b8>
 8004c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c96:	4453      	add	r3, sl
 8004c98:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9a:	783b      	ldrb	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 809d 	beq.w	8004ddc <_svfiprintf_r+0x1b8>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	9307      	str	r3, [sp, #28]
 8004cb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004cb6:	462f      	mov	r7, r5
 8004cb8:	2205      	movs	r2, #5
 8004cba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004cbe:	4850      	ldr	r0, [pc, #320]	; (8004e00 <_svfiprintf_r+0x1dc>)
 8004cc0:	f7fb fa86 	bl	80001d0 <memchr>
 8004cc4:	9b04      	ldr	r3, [sp, #16]
 8004cc6:	b9d0      	cbnz	r0, 8004cfe <_svfiprintf_r+0xda>
 8004cc8:	06d9      	lsls	r1, r3, #27
 8004cca:	bf44      	itt	mi
 8004ccc:	2220      	movmi	r2, #32
 8004cce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cd2:	071a      	lsls	r2, r3, #28
 8004cd4:	bf44      	itt	mi
 8004cd6:	222b      	movmi	r2, #43	; 0x2b
 8004cd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cdc:	782a      	ldrb	r2, [r5, #0]
 8004cde:	2a2a      	cmp	r2, #42	; 0x2a
 8004ce0:	d015      	beq.n	8004d0e <_svfiprintf_r+0xea>
 8004ce2:	9a07      	ldr	r2, [sp, #28]
 8004ce4:	462f      	mov	r7, r5
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	250a      	movs	r5, #10
 8004cea:	4639      	mov	r1, r7
 8004cec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cf0:	3b30      	subs	r3, #48	; 0x30
 8004cf2:	2b09      	cmp	r3, #9
 8004cf4:	d94d      	bls.n	8004d92 <_svfiprintf_r+0x16e>
 8004cf6:	b1b8      	cbz	r0, 8004d28 <_svfiprintf_r+0x104>
 8004cf8:	e00f      	b.n	8004d1a <_svfiprintf_r+0xf6>
 8004cfa:	462f      	mov	r7, r5
 8004cfc:	e7b8      	b.n	8004c70 <_svfiprintf_r+0x4c>
 8004cfe:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <_svfiprintf_r+0x1dc>)
 8004d00:	1a80      	subs	r0, r0, r2
 8004d02:	fa0b f000 	lsl.w	r0, fp, r0
 8004d06:	4318      	orrs	r0, r3
 8004d08:	9004      	str	r0, [sp, #16]
 8004d0a:	463d      	mov	r5, r7
 8004d0c:	e7d3      	b.n	8004cb6 <_svfiprintf_r+0x92>
 8004d0e:	9a03      	ldr	r2, [sp, #12]
 8004d10:	1d11      	adds	r1, r2, #4
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	9103      	str	r1, [sp, #12]
 8004d16:	2a00      	cmp	r2, #0
 8004d18:	db01      	blt.n	8004d1e <_svfiprintf_r+0xfa>
 8004d1a:	9207      	str	r2, [sp, #28]
 8004d1c:	e004      	b.n	8004d28 <_svfiprintf_r+0x104>
 8004d1e:	4252      	negs	r2, r2
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	9207      	str	r2, [sp, #28]
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	783b      	ldrb	r3, [r7, #0]
 8004d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d2c:	d10c      	bne.n	8004d48 <_svfiprintf_r+0x124>
 8004d2e:	787b      	ldrb	r3, [r7, #1]
 8004d30:	2b2a      	cmp	r3, #42	; 0x2a
 8004d32:	d133      	bne.n	8004d9c <_svfiprintf_r+0x178>
 8004d34:	9b03      	ldr	r3, [sp, #12]
 8004d36:	1d1a      	adds	r2, r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	9203      	str	r2, [sp, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	bfb8      	it	lt
 8004d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d44:	3702      	adds	r7, #2
 8004d46:	9305      	str	r3, [sp, #20]
 8004d48:	4d2e      	ldr	r5, [pc, #184]	; (8004e04 <_svfiprintf_r+0x1e0>)
 8004d4a:	7839      	ldrb	r1, [r7, #0]
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7fb fa3e 	bl	80001d0 <memchr>
 8004d54:	b138      	cbz	r0, 8004d66 <_svfiprintf_r+0x142>
 8004d56:	2340      	movs	r3, #64	; 0x40
 8004d58:	1b40      	subs	r0, r0, r5
 8004d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d5e:	9b04      	ldr	r3, [sp, #16]
 8004d60:	4303      	orrs	r3, r0
 8004d62:	3701      	adds	r7, #1
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	7839      	ldrb	r1, [r7, #0]
 8004d68:	4827      	ldr	r0, [pc, #156]	; (8004e08 <_svfiprintf_r+0x1e4>)
 8004d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d6e:	2206      	movs	r2, #6
 8004d70:	1c7e      	adds	r6, r7, #1
 8004d72:	f7fb fa2d 	bl	80001d0 <memchr>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d038      	beq.n	8004dec <_svfiprintf_r+0x1c8>
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <_svfiprintf_r+0x1e8>)
 8004d7c:	bb13      	cbnz	r3, 8004dc4 <_svfiprintf_r+0x1a0>
 8004d7e:	9b03      	ldr	r3, [sp, #12]
 8004d80:	3307      	adds	r3, #7
 8004d82:	f023 0307 	bic.w	r3, r3, #7
 8004d86:	3308      	adds	r3, #8
 8004d88:	9303      	str	r3, [sp, #12]
 8004d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d8c:	444b      	add	r3, r9
 8004d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d90:	e76d      	b.n	8004c6e <_svfiprintf_r+0x4a>
 8004d92:	fb05 3202 	mla	r2, r5, r2, r3
 8004d96:	2001      	movs	r0, #1
 8004d98:	460f      	mov	r7, r1
 8004d9a:	e7a6      	b.n	8004cea <_svfiprintf_r+0xc6>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	3701      	adds	r7, #1
 8004da0:	9305      	str	r3, [sp, #20]
 8004da2:	4619      	mov	r1, r3
 8004da4:	250a      	movs	r5, #10
 8004da6:	4638      	mov	r0, r7
 8004da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dac:	3a30      	subs	r2, #48	; 0x30
 8004dae:	2a09      	cmp	r2, #9
 8004db0:	d903      	bls.n	8004dba <_svfiprintf_r+0x196>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0c8      	beq.n	8004d48 <_svfiprintf_r+0x124>
 8004db6:	9105      	str	r1, [sp, #20]
 8004db8:	e7c6      	b.n	8004d48 <_svfiprintf_r+0x124>
 8004dba:	fb05 2101 	mla	r1, r5, r1, r2
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	e7f0      	b.n	8004da6 <_svfiprintf_r+0x182>
 8004dc4:	ab03      	add	r3, sp, #12
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	4622      	mov	r2, r4
 8004dca:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <_svfiprintf_r+0x1ec>)
 8004dcc:	a904      	add	r1, sp, #16
 8004dce:	4640      	mov	r0, r8
 8004dd0:	f3af 8000 	nop.w
 8004dd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004dd8:	4681      	mov	r9, r0
 8004dda:	d1d6      	bne.n	8004d8a <_svfiprintf_r+0x166>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	065b      	lsls	r3, r3, #25
 8004de0:	f53f af35 	bmi.w	8004c4e <_svfiprintf_r+0x2a>
 8004de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de6:	b01d      	add	sp, #116	; 0x74
 8004de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dec:	ab03      	add	r3, sp, #12
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4622      	mov	r2, r4
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <_svfiprintf_r+0x1ec>)
 8004df4:	a904      	add	r1, sp, #16
 8004df6:	4640      	mov	r0, r8
 8004df8:	f000 f882 	bl	8004f00 <_printf_i>
 8004dfc:	e7ea      	b.n	8004dd4 <_svfiprintf_r+0x1b0>
 8004dfe:	bf00      	nop
 8004e00:	08005388 	.word	0x08005388
 8004e04:	0800538e 	.word	0x0800538e
 8004e08:	08005392 	.word	0x08005392
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	08004b71 	.word	0x08004b71

08004e14 <_printf_common>:
 8004e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e18:	4691      	mov	r9, r2
 8004e1a:	461f      	mov	r7, r3
 8004e1c:	688a      	ldr	r2, [r1, #8]
 8004e1e:	690b      	ldr	r3, [r1, #16]
 8004e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e24:	4293      	cmp	r3, r2
 8004e26:	bfb8      	it	lt
 8004e28:	4613      	movlt	r3, r2
 8004e2a:	f8c9 3000 	str.w	r3, [r9]
 8004e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e32:	4606      	mov	r6, r0
 8004e34:	460c      	mov	r4, r1
 8004e36:	b112      	cbz	r2, 8004e3e <_printf_common+0x2a>
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f8c9 3000 	str.w	r3, [r9]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	0699      	lsls	r1, r3, #26
 8004e42:	bf42      	ittt	mi
 8004e44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e48:	3302      	addmi	r3, #2
 8004e4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004e4e:	6825      	ldr	r5, [r4, #0]
 8004e50:	f015 0506 	ands.w	r5, r5, #6
 8004e54:	d107      	bne.n	8004e66 <_printf_common+0x52>
 8004e56:	f104 0a19 	add.w	sl, r4, #25
 8004e5a:	68e3      	ldr	r3, [r4, #12]
 8004e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	42ab      	cmp	r3, r5
 8004e64:	dc28      	bgt.n	8004eb8 <_printf_common+0xa4>
 8004e66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	3300      	adds	r3, #0
 8004e6e:	bf18      	it	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	0692      	lsls	r2, r2, #26
 8004e74:	d42d      	bmi.n	8004ed2 <_printf_common+0xbe>
 8004e76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e7a:	4639      	mov	r1, r7
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	47c0      	blx	r8
 8004e80:	3001      	adds	r0, #1
 8004e82:	d020      	beq.n	8004ec6 <_printf_common+0xb2>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	68e5      	ldr	r5, [r4, #12]
 8004e88:	f8d9 2000 	ldr.w	r2, [r9]
 8004e8c:	f003 0306 	and.w	r3, r3, #6
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	bf08      	it	eq
 8004e94:	1aad      	subeq	r5, r5, r2
 8004e96:	68a3      	ldr	r3, [r4, #8]
 8004e98:	6922      	ldr	r2, [r4, #16]
 8004e9a:	bf0c      	ite	eq
 8004e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea0:	2500      	movne	r5, #0
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bfc4      	itt	gt
 8004ea6:	1a9b      	subgt	r3, r3, r2
 8004ea8:	18ed      	addgt	r5, r5, r3
 8004eaa:	f04f 0900 	mov.w	r9, #0
 8004eae:	341a      	adds	r4, #26
 8004eb0:	454d      	cmp	r5, r9
 8004eb2:	d11a      	bne.n	8004eea <_printf_common+0xd6>
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	e008      	b.n	8004eca <_printf_common+0xb6>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	4652      	mov	r2, sl
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d103      	bne.n	8004ece <_printf_common+0xba>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ece:	3501      	adds	r5, #1
 8004ed0:	e7c3      	b.n	8004e5a <_printf_common+0x46>
 8004ed2:	18e1      	adds	r1, r4, r3
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	2030      	movs	r0, #48	; 0x30
 8004ed8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004edc:	4422      	add	r2, r4
 8004ede:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	e7c5      	b.n	8004e76 <_printf_common+0x62>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4622      	mov	r2, r4
 8004eee:	4639      	mov	r1, r7
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	47c0      	blx	r8
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d0e6      	beq.n	8004ec6 <_printf_common+0xb2>
 8004ef8:	f109 0901 	add.w	r9, r9, #1
 8004efc:	e7d8      	b.n	8004eb0 <_printf_common+0x9c>
	...

08004f00 <_printf_i>:
 8004f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004f08:	460c      	mov	r4, r1
 8004f0a:	7e09      	ldrb	r1, [r1, #24]
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	296e      	cmp	r1, #110	; 0x6e
 8004f10:	4617      	mov	r7, r2
 8004f12:	4606      	mov	r6, r0
 8004f14:	4698      	mov	r8, r3
 8004f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f18:	f000 80b3 	beq.w	8005082 <_printf_i+0x182>
 8004f1c:	d822      	bhi.n	8004f64 <_printf_i+0x64>
 8004f1e:	2963      	cmp	r1, #99	; 0x63
 8004f20:	d036      	beq.n	8004f90 <_printf_i+0x90>
 8004f22:	d80a      	bhi.n	8004f3a <_printf_i+0x3a>
 8004f24:	2900      	cmp	r1, #0
 8004f26:	f000 80b9 	beq.w	800509c <_printf_i+0x19c>
 8004f2a:	2958      	cmp	r1, #88	; 0x58
 8004f2c:	f000 8083 	beq.w	8005036 <_printf_i+0x136>
 8004f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f38:	e032      	b.n	8004fa0 <_printf_i+0xa0>
 8004f3a:	2964      	cmp	r1, #100	; 0x64
 8004f3c:	d001      	beq.n	8004f42 <_printf_i+0x42>
 8004f3e:	2969      	cmp	r1, #105	; 0x69
 8004f40:	d1f6      	bne.n	8004f30 <_printf_i+0x30>
 8004f42:	6820      	ldr	r0, [r4, #0]
 8004f44:	6813      	ldr	r3, [r2, #0]
 8004f46:	0605      	lsls	r5, r0, #24
 8004f48:	f103 0104 	add.w	r1, r3, #4
 8004f4c:	d52a      	bpl.n	8004fa4 <_printf_i+0xa4>
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6011      	str	r1, [r2, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	da03      	bge.n	8004f5e <_printf_i+0x5e>
 8004f56:	222d      	movs	r2, #45	; 0x2d
 8004f58:	425b      	negs	r3, r3
 8004f5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f5e:	486f      	ldr	r0, [pc, #444]	; (800511c <_printf_i+0x21c>)
 8004f60:	220a      	movs	r2, #10
 8004f62:	e039      	b.n	8004fd8 <_printf_i+0xd8>
 8004f64:	2973      	cmp	r1, #115	; 0x73
 8004f66:	f000 809d 	beq.w	80050a4 <_printf_i+0x1a4>
 8004f6a:	d808      	bhi.n	8004f7e <_printf_i+0x7e>
 8004f6c:	296f      	cmp	r1, #111	; 0x6f
 8004f6e:	d020      	beq.n	8004fb2 <_printf_i+0xb2>
 8004f70:	2970      	cmp	r1, #112	; 0x70
 8004f72:	d1dd      	bne.n	8004f30 <_printf_i+0x30>
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	f043 0320 	orr.w	r3, r3, #32
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	e003      	b.n	8004f86 <_printf_i+0x86>
 8004f7e:	2975      	cmp	r1, #117	; 0x75
 8004f80:	d017      	beq.n	8004fb2 <_printf_i+0xb2>
 8004f82:	2978      	cmp	r1, #120	; 0x78
 8004f84:	d1d4      	bne.n	8004f30 <_printf_i+0x30>
 8004f86:	2378      	movs	r3, #120	; 0x78
 8004f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f8c:	4864      	ldr	r0, [pc, #400]	; (8005120 <_printf_i+0x220>)
 8004f8e:	e055      	b.n	800503c <_printf_i+0x13c>
 8004f90:	6813      	ldr	r3, [r2, #0]
 8004f92:	1d19      	adds	r1, r3, #4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6011      	str	r1, [r2, #0]
 8004f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e08c      	b.n	80050be <_printf_i+0x1be>
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6011      	str	r1, [r2, #0]
 8004fa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fac:	bf18      	it	ne
 8004fae:	b21b      	sxthne	r3, r3
 8004fb0:	e7cf      	b.n	8004f52 <_printf_i+0x52>
 8004fb2:	6813      	ldr	r3, [r2, #0]
 8004fb4:	6825      	ldr	r5, [r4, #0]
 8004fb6:	1d18      	adds	r0, r3, #4
 8004fb8:	6010      	str	r0, [r2, #0]
 8004fba:	0628      	lsls	r0, r5, #24
 8004fbc:	d501      	bpl.n	8004fc2 <_printf_i+0xc2>
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	e002      	b.n	8004fc8 <_printf_i+0xc8>
 8004fc2:	0668      	lsls	r0, r5, #25
 8004fc4:	d5fb      	bpl.n	8004fbe <_printf_i+0xbe>
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	4854      	ldr	r0, [pc, #336]	; (800511c <_printf_i+0x21c>)
 8004fca:	296f      	cmp	r1, #111	; 0x6f
 8004fcc:	bf14      	ite	ne
 8004fce:	220a      	movne	r2, #10
 8004fd0:	2208      	moveq	r2, #8
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fd8:	6865      	ldr	r5, [r4, #4]
 8004fda:	60a5      	str	r5, [r4, #8]
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	f2c0 8095 	blt.w	800510c <_printf_i+0x20c>
 8004fe2:	6821      	ldr	r1, [r4, #0]
 8004fe4:	f021 0104 	bic.w	r1, r1, #4
 8004fe8:	6021      	str	r1, [r4, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d13d      	bne.n	800506a <_printf_i+0x16a>
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	f040 808e 	bne.w	8005110 <_printf_i+0x210>
 8004ff4:	4665      	mov	r5, ip
 8004ff6:	2a08      	cmp	r2, #8
 8004ff8:	d10b      	bne.n	8005012 <_printf_i+0x112>
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	07db      	lsls	r3, r3, #31
 8004ffe:	d508      	bpl.n	8005012 <_printf_i+0x112>
 8005000:	6923      	ldr	r3, [r4, #16]
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	bfde      	ittt	le
 8005008:	2330      	movle	r3, #48	; 0x30
 800500a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800500e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005012:	ebac 0305 	sub.w	r3, ip, r5
 8005016:	6123      	str	r3, [r4, #16]
 8005018:	f8cd 8000 	str.w	r8, [sp]
 800501c:	463b      	mov	r3, r7
 800501e:	aa03      	add	r2, sp, #12
 8005020:	4621      	mov	r1, r4
 8005022:	4630      	mov	r0, r6
 8005024:	f7ff fef6 	bl	8004e14 <_printf_common>
 8005028:	3001      	adds	r0, #1
 800502a:	d14d      	bne.n	80050c8 <_printf_i+0x1c8>
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	b005      	add	sp, #20
 8005032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005036:	4839      	ldr	r0, [pc, #228]	; (800511c <_printf_i+0x21c>)
 8005038:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	6821      	ldr	r1, [r4, #0]
 8005040:	1d1d      	adds	r5, r3, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6015      	str	r5, [r2, #0]
 8005046:	060a      	lsls	r2, r1, #24
 8005048:	d50b      	bpl.n	8005062 <_printf_i+0x162>
 800504a:	07ca      	lsls	r2, r1, #31
 800504c:	bf44      	itt	mi
 800504e:	f041 0120 	orrmi.w	r1, r1, #32
 8005052:	6021      	strmi	r1, [r4, #0]
 8005054:	b91b      	cbnz	r3, 800505e <_printf_i+0x15e>
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	f022 0220 	bic.w	r2, r2, #32
 800505c:	6022      	str	r2, [r4, #0]
 800505e:	2210      	movs	r2, #16
 8005060:	e7b7      	b.n	8004fd2 <_printf_i+0xd2>
 8005062:	064d      	lsls	r5, r1, #25
 8005064:	bf48      	it	mi
 8005066:	b29b      	uxthmi	r3, r3
 8005068:	e7ef      	b.n	800504a <_printf_i+0x14a>
 800506a:	4665      	mov	r5, ip
 800506c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005070:	fb02 3311 	mls	r3, r2, r1, r3
 8005074:	5cc3      	ldrb	r3, [r0, r3]
 8005076:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800507a:	460b      	mov	r3, r1
 800507c:	2900      	cmp	r1, #0
 800507e:	d1f5      	bne.n	800506c <_printf_i+0x16c>
 8005080:	e7b9      	b.n	8004ff6 <_printf_i+0xf6>
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	6825      	ldr	r5, [r4, #0]
 8005086:	6961      	ldr	r1, [r4, #20]
 8005088:	1d18      	adds	r0, r3, #4
 800508a:	6010      	str	r0, [r2, #0]
 800508c:	0628      	lsls	r0, r5, #24
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	d501      	bpl.n	8005096 <_printf_i+0x196>
 8005092:	6019      	str	r1, [r3, #0]
 8005094:	e002      	b.n	800509c <_printf_i+0x19c>
 8005096:	066a      	lsls	r2, r5, #25
 8005098:	d5fb      	bpl.n	8005092 <_printf_i+0x192>
 800509a:	8019      	strh	r1, [r3, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	4665      	mov	r5, ip
 80050a2:	e7b9      	b.n	8005018 <_printf_i+0x118>
 80050a4:	6813      	ldr	r3, [r2, #0]
 80050a6:	1d19      	adds	r1, r3, #4
 80050a8:	6011      	str	r1, [r2, #0]
 80050aa:	681d      	ldr	r5, [r3, #0]
 80050ac:	6862      	ldr	r2, [r4, #4]
 80050ae:	2100      	movs	r1, #0
 80050b0:	4628      	mov	r0, r5
 80050b2:	f7fb f88d 	bl	80001d0 <memchr>
 80050b6:	b108      	cbz	r0, 80050bc <_printf_i+0x1bc>
 80050b8:	1b40      	subs	r0, r0, r5
 80050ba:	6060      	str	r0, [r4, #4]
 80050bc:	6863      	ldr	r3, [r4, #4]
 80050be:	6123      	str	r3, [r4, #16]
 80050c0:	2300      	movs	r3, #0
 80050c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c6:	e7a7      	b.n	8005018 <_printf_i+0x118>
 80050c8:	6923      	ldr	r3, [r4, #16]
 80050ca:	462a      	mov	r2, r5
 80050cc:	4639      	mov	r1, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	47c0      	blx	r8
 80050d2:	3001      	adds	r0, #1
 80050d4:	d0aa      	beq.n	800502c <_printf_i+0x12c>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	079b      	lsls	r3, r3, #30
 80050da:	d413      	bmi.n	8005104 <_printf_i+0x204>
 80050dc:	68e0      	ldr	r0, [r4, #12]
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	4298      	cmp	r0, r3
 80050e2:	bfb8      	it	lt
 80050e4:	4618      	movlt	r0, r3
 80050e6:	e7a3      	b.n	8005030 <_printf_i+0x130>
 80050e8:	2301      	movs	r3, #1
 80050ea:	464a      	mov	r2, r9
 80050ec:	4639      	mov	r1, r7
 80050ee:	4630      	mov	r0, r6
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d09a      	beq.n	800502c <_printf_i+0x12c>
 80050f6:	3501      	adds	r5, #1
 80050f8:	68e3      	ldr	r3, [r4, #12]
 80050fa:	9a03      	ldr	r2, [sp, #12]
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	42ab      	cmp	r3, r5
 8005100:	dcf2      	bgt.n	80050e8 <_printf_i+0x1e8>
 8005102:	e7eb      	b.n	80050dc <_printf_i+0x1dc>
 8005104:	2500      	movs	r5, #0
 8005106:	f104 0919 	add.w	r9, r4, #25
 800510a:	e7f5      	b.n	80050f8 <_printf_i+0x1f8>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ac      	bne.n	800506a <_printf_i+0x16a>
 8005110:	7803      	ldrb	r3, [r0, #0]
 8005112:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005116:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800511a:	e76c      	b.n	8004ff6 <_printf_i+0xf6>
 800511c:	08005399 	.word	0x08005399
 8005120:	080053aa 	.word	0x080053aa

08005124 <memcpy>:
 8005124:	b510      	push	{r4, lr}
 8005126:	1e43      	subs	r3, r0, #1
 8005128:	440a      	add	r2, r1
 800512a:	4291      	cmp	r1, r2
 800512c:	d100      	bne.n	8005130 <memcpy+0xc>
 800512e:	bd10      	pop	{r4, pc}
 8005130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005134:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005138:	e7f7      	b.n	800512a <memcpy+0x6>

0800513a <memmove>:
 800513a:	4288      	cmp	r0, r1
 800513c:	b510      	push	{r4, lr}
 800513e:	eb01 0302 	add.w	r3, r1, r2
 8005142:	d807      	bhi.n	8005154 <memmove+0x1a>
 8005144:	1e42      	subs	r2, r0, #1
 8005146:	4299      	cmp	r1, r3
 8005148:	d00a      	beq.n	8005160 <memmove+0x26>
 800514a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005152:	e7f8      	b.n	8005146 <memmove+0xc>
 8005154:	4283      	cmp	r3, r0
 8005156:	d9f5      	bls.n	8005144 <memmove+0xa>
 8005158:	1881      	adds	r1, r0, r2
 800515a:	1ad2      	subs	r2, r2, r3
 800515c:	42d3      	cmn	r3, r2
 800515e:	d100      	bne.n	8005162 <memmove+0x28>
 8005160:	bd10      	pop	{r4, pc}
 8005162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005166:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800516a:	e7f7      	b.n	800515c <memmove+0x22>

0800516c <_free_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	4605      	mov	r5, r0
 8005170:	2900      	cmp	r1, #0
 8005172:	d045      	beq.n	8005200 <_free_r+0x94>
 8005174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005178:	1f0c      	subs	r4, r1, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	bfb8      	it	lt
 800517e:	18e4      	addlt	r4, r4, r3
 8005180:	f000 f8d2 	bl	8005328 <__malloc_lock>
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <_free_r+0x98>)
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	4610      	mov	r0, r2
 800518a:	b933      	cbnz	r3, 800519a <_free_r+0x2e>
 800518c:	6063      	str	r3, [r4, #4]
 800518e:	6014      	str	r4, [r2, #0]
 8005190:	4628      	mov	r0, r5
 8005192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005196:	f000 b8c8 	b.w	800532a <__malloc_unlock>
 800519a:	42a3      	cmp	r3, r4
 800519c:	d90c      	bls.n	80051b8 <_free_r+0x4c>
 800519e:	6821      	ldr	r1, [r4, #0]
 80051a0:	1862      	adds	r2, r4, r1
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bf04      	itt	eq
 80051a6:	681a      	ldreq	r2, [r3, #0]
 80051a8:	685b      	ldreq	r3, [r3, #4]
 80051aa:	6063      	str	r3, [r4, #4]
 80051ac:	bf04      	itt	eq
 80051ae:	1852      	addeq	r2, r2, r1
 80051b0:	6022      	streq	r2, [r4, #0]
 80051b2:	6004      	str	r4, [r0, #0]
 80051b4:	e7ec      	b.n	8005190 <_free_r+0x24>
 80051b6:	4613      	mov	r3, r2
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	b10a      	cbz	r2, 80051c0 <_free_r+0x54>
 80051bc:	42a2      	cmp	r2, r4
 80051be:	d9fa      	bls.n	80051b6 <_free_r+0x4a>
 80051c0:	6819      	ldr	r1, [r3, #0]
 80051c2:	1858      	adds	r0, r3, r1
 80051c4:	42a0      	cmp	r0, r4
 80051c6:	d10b      	bne.n	80051e0 <_free_r+0x74>
 80051c8:	6820      	ldr	r0, [r4, #0]
 80051ca:	4401      	add	r1, r0
 80051cc:	1858      	adds	r0, r3, r1
 80051ce:	4282      	cmp	r2, r0
 80051d0:	6019      	str	r1, [r3, #0]
 80051d2:	d1dd      	bne.n	8005190 <_free_r+0x24>
 80051d4:	6810      	ldr	r0, [r2, #0]
 80051d6:	6852      	ldr	r2, [r2, #4]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	4401      	add	r1, r0
 80051dc:	6019      	str	r1, [r3, #0]
 80051de:	e7d7      	b.n	8005190 <_free_r+0x24>
 80051e0:	d902      	bls.n	80051e8 <_free_r+0x7c>
 80051e2:	230c      	movs	r3, #12
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	e7d3      	b.n	8005190 <_free_r+0x24>
 80051e8:	6820      	ldr	r0, [r4, #0]
 80051ea:	1821      	adds	r1, r4, r0
 80051ec:	428a      	cmp	r2, r1
 80051ee:	bf04      	itt	eq
 80051f0:	6811      	ldreq	r1, [r2, #0]
 80051f2:	6852      	ldreq	r2, [r2, #4]
 80051f4:	6062      	str	r2, [r4, #4]
 80051f6:	bf04      	itt	eq
 80051f8:	1809      	addeq	r1, r1, r0
 80051fa:	6021      	streq	r1, [r4, #0]
 80051fc:	605c      	str	r4, [r3, #4]
 80051fe:	e7c7      	b.n	8005190 <_free_r+0x24>
 8005200:	bd38      	pop	{r3, r4, r5, pc}
 8005202:	bf00      	nop
 8005204:	200000d4 	.word	0x200000d4

08005208 <_malloc_r>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	1ccd      	adds	r5, r1, #3
 800520c:	f025 0503 	bic.w	r5, r5, #3
 8005210:	3508      	adds	r5, #8
 8005212:	2d0c      	cmp	r5, #12
 8005214:	bf38      	it	cc
 8005216:	250c      	movcc	r5, #12
 8005218:	2d00      	cmp	r5, #0
 800521a:	4606      	mov	r6, r0
 800521c:	db01      	blt.n	8005222 <_malloc_r+0x1a>
 800521e:	42a9      	cmp	r1, r5
 8005220:	d903      	bls.n	800522a <_malloc_r+0x22>
 8005222:	230c      	movs	r3, #12
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	2000      	movs	r0, #0
 8005228:	bd70      	pop	{r4, r5, r6, pc}
 800522a:	f000 f87d 	bl	8005328 <__malloc_lock>
 800522e:	4a21      	ldr	r2, [pc, #132]	; (80052b4 <_malloc_r+0xac>)
 8005230:	6814      	ldr	r4, [r2, #0]
 8005232:	4621      	mov	r1, r4
 8005234:	b991      	cbnz	r1, 800525c <_malloc_r+0x54>
 8005236:	4c20      	ldr	r4, [pc, #128]	; (80052b8 <_malloc_r+0xb0>)
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	b91b      	cbnz	r3, 8005244 <_malloc_r+0x3c>
 800523c:	4630      	mov	r0, r6
 800523e:	f000 f863 	bl	8005308 <_sbrk_r>
 8005242:	6020      	str	r0, [r4, #0]
 8005244:	4629      	mov	r1, r5
 8005246:	4630      	mov	r0, r6
 8005248:	f000 f85e 	bl	8005308 <_sbrk_r>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d124      	bne.n	800529a <_malloc_r+0x92>
 8005250:	230c      	movs	r3, #12
 8005252:	6033      	str	r3, [r6, #0]
 8005254:	4630      	mov	r0, r6
 8005256:	f000 f868 	bl	800532a <__malloc_unlock>
 800525a:	e7e4      	b.n	8005226 <_malloc_r+0x1e>
 800525c:	680b      	ldr	r3, [r1, #0]
 800525e:	1b5b      	subs	r3, r3, r5
 8005260:	d418      	bmi.n	8005294 <_malloc_r+0x8c>
 8005262:	2b0b      	cmp	r3, #11
 8005264:	d90f      	bls.n	8005286 <_malloc_r+0x7e>
 8005266:	600b      	str	r3, [r1, #0]
 8005268:	50cd      	str	r5, [r1, r3]
 800526a:	18cc      	adds	r4, r1, r3
 800526c:	4630      	mov	r0, r6
 800526e:	f000 f85c 	bl	800532a <__malloc_unlock>
 8005272:	f104 000b 	add.w	r0, r4, #11
 8005276:	1d23      	adds	r3, r4, #4
 8005278:	f020 0007 	bic.w	r0, r0, #7
 800527c:	1ac3      	subs	r3, r0, r3
 800527e:	d0d3      	beq.n	8005228 <_malloc_r+0x20>
 8005280:	425a      	negs	r2, r3
 8005282:	50e2      	str	r2, [r4, r3]
 8005284:	e7d0      	b.n	8005228 <_malloc_r+0x20>
 8005286:	428c      	cmp	r4, r1
 8005288:	684b      	ldr	r3, [r1, #4]
 800528a:	bf16      	itet	ne
 800528c:	6063      	strne	r3, [r4, #4]
 800528e:	6013      	streq	r3, [r2, #0]
 8005290:	460c      	movne	r4, r1
 8005292:	e7eb      	b.n	800526c <_malloc_r+0x64>
 8005294:	460c      	mov	r4, r1
 8005296:	6849      	ldr	r1, [r1, #4]
 8005298:	e7cc      	b.n	8005234 <_malloc_r+0x2c>
 800529a:	1cc4      	adds	r4, r0, #3
 800529c:	f024 0403 	bic.w	r4, r4, #3
 80052a0:	42a0      	cmp	r0, r4
 80052a2:	d005      	beq.n	80052b0 <_malloc_r+0xa8>
 80052a4:	1a21      	subs	r1, r4, r0
 80052a6:	4630      	mov	r0, r6
 80052a8:	f000 f82e 	bl	8005308 <_sbrk_r>
 80052ac:	3001      	adds	r0, #1
 80052ae:	d0cf      	beq.n	8005250 <_malloc_r+0x48>
 80052b0:	6025      	str	r5, [r4, #0]
 80052b2:	e7db      	b.n	800526c <_malloc_r+0x64>
 80052b4:	200000d4 	.word	0x200000d4
 80052b8:	200000d8 	.word	0x200000d8

080052bc <_realloc_r>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	4607      	mov	r7, r0
 80052c0:	4614      	mov	r4, r2
 80052c2:	460e      	mov	r6, r1
 80052c4:	b921      	cbnz	r1, 80052d0 <_realloc_r+0x14>
 80052c6:	4611      	mov	r1, r2
 80052c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052cc:	f7ff bf9c 	b.w	8005208 <_malloc_r>
 80052d0:	b922      	cbnz	r2, 80052dc <_realloc_r+0x20>
 80052d2:	f7ff ff4b 	bl	800516c <_free_r>
 80052d6:	4625      	mov	r5, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052dc:	f000 f826 	bl	800532c <_malloc_usable_size_r>
 80052e0:	42a0      	cmp	r0, r4
 80052e2:	d20f      	bcs.n	8005304 <_realloc_r+0x48>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4638      	mov	r0, r7
 80052e8:	f7ff ff8e 	bl	8005208 <_malloc_r>
 80052ec:	4605      	mov	r5, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d0f2      	beq.n	80052d8 <_realloc_r+0x1c>
 80052f2:	4631      	mov	r1, r6
 80052f4:	4622      	mov	r2, r4
 80052f6:	f7ff ff15 	bl	8005124 <memcpy>
 80052fa:	4631      	mov	r1, r6
 80052fc:	4638      	mov	r0, r7
 80052fe:	f7ff ff35 	bl	800516c <_free_r>
 8005302:	e7e9      	b.n	80052d8 <_realloc_r+0x1c>
 8005304:	4635      	mov	r5, r6
 8005306:	e7e7      	b.n	80052d8 <_realloc_r+0x1c>

08005308 <_sbrk_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4c06      	ldr	r4, [pc, #24]	; (8005324 <_sbrk_r+0x1c>)
 800530c:	2300      	movs	r3, #0
 800530e:	4605      	mov	r5, r0
 8005310:	4608      	mov	r0, r1
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	f7fb ff36 	bl	8001184 <_sbrk>
 8005318:	1c43      	adds	r3, r0, #1
 800531a:	d102      	bne.n	8005322 <_sbrk_r+0x1a>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	b103      	cbz	r3, 8005322 <_sbrk_r+0x1a>
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	bd38      	pop	{r3, r4, r5, pc}
 8005324:	20000294 	.word	0x20000294

08005328 <__malloc_lock>:
 8005328:	4770      	bx	lr

0800532a <__malloc_unlock>:
 800532a:	4770      	bx	lr

0800532c <_malloc_usable_size_r>:
 800532c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005330:	1f18      	subs	r0, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	bfbc      	itt	lt
 8005336:	580b      	ldrlt	r3, [r1, r0]
 8005338:	18c0      	addlt	r0, r0, r3
 800533a:	4770      	bx	lr

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
